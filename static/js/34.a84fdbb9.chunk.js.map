{"version":3,"sources":["../node_modules/framer-motion/dist/es/gestures/utils/event-type.js","../node_modules/framer-motion/dist/es/events/event-info.js","../node_modules/framer-motion/dist/es/events/use-dom-event.js","../node_modules/framer-motion/dist/es/events/use-pointer-event.js","../node_modules/framer-motion/dist/es/events/utils.js","../node_modules/popmotion/dist/es/utils/is-point.js","../node_modules/popmotion/dist/es/utils/is-point-3d.js","../node_modules/popmotion/dist/es/utils/distance.js","../node_modules/framer-motion/dist/es/gestures/PanSession.js","../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js","../node_modules/framer-motion/dist/es/utils/each-axis.js","../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js","../node_modules/framer-motion/dist/es/render/dom/projection/measure.js","../node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js","../node_modules/framer-motion/dist/es/render/utils/types.js","../node_modules/framer-motion/dist/es/motion/features/layout/utils.js","../node_modules/framer-motion/dist/es/render/utils/is-draggable.js","../node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js","../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js","../node_modules/framer-motion/dist/es/render/dom/projection/convert-to-relative.js","../node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js","../node_modules/framer-motion/dist/es/motion/features/drag.js","../node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js","../node_modules/framer-motion/dist/es/gestures/drag/use-drag.js","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js","../node_modules/framer-motion/dist/es/render/dom/projection/default-scale-correctors.js","../node_modules/framer-motion/dist/es/motion/features/layout/Animate.js","../node_modules/framer-motion/dist/es/motion/features/layout/Measure.js","../node_modules/framer-motion/dist/es/motion/features/layout/index.js","../node_modules/framer-motion/dist/es/utils/shallow-compare.js","../node_modules/framer-motion/dist/es/render/utils/animation-state.js","../node_modules/framer-motion/dist/es/motion/features/animations.js","../node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js","../node_modules/framer-motion/dist/es/motion/features/gestures.js","../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js","../node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js","../node_modules/framer-motion/dist/es/render/utils/state.js","../node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js","../node_modules/framer-motion/dist/es/render/utils/lifecycles.js","../node_modules/framer-motion/dist/es/render/utils/projection.js","../node_modules/framer-motion/dist/es/render/utils/flat-tree.js","../node_modules/framer-motion/dist/es/render/index.js","../node_modules/framer-motion/dist/es/render/utils/motion-values.js","../node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js","../node_modules/framer-motion/dist/es/render/html/visual-element.js","../node_modules/framer-motion/dist/es/render/svg/visual-element.js","../node_modules/framer-motion/dist/es/render/dom/features-animation.js","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.js","../node_modules/framer-motion/dist/es/render/dom/features-max.js"],"names":["isMouseEvent","event","PointerEvent","pointerType","MouseEvent","isTouchEvent","touches","defaultPagePoint","pageX","pageY","pointFromTouch","e","pointType","point","changedTouches","x","y","pointFromMouse","extractEventInfo","wrapHandler","handler","shouldFilterPrimaryPointer","eventHandler","listener","button","addDomEvent","target","eventName","options","addEventListener","removeEventListener","useDomEvent","ref","useEffect","element","current","mouseEventNames","pointerdown","pointermove","pointerup","pointercancel","pointerover","pointerout","pointerenter","pointerleave","touchEventNames","getPointerEventName","name","isBrowser","window","onpointerdown","ontouchstart","onmousedown","addPointerEvent","usePointerEvent","isPoint","hasOwnProperty","isPoint3D","distance1D","a","b","Math","abs","distance","isNum","xDelta","yDelta","zDelta","z","sqrt","pow","PanSession","handlers","_a","_this","this","transformPagePoint","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","offset","timestamp","getFrameData","push","__assign","onStart","onMove","handlePointerMove","transformPoint","buttons","handlePointerUp","sync","update","end","onEnd","onSessionEnd","panInfo","length","initialInfo","onSessionStart","removeListeners","pipe","prototype","updateHandlers","cancelSync","subtractPoint","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","timeDelta","i","timestampedPoint","lastPoint","secondsToMilliseconds","time","currentVelocity","Infinity","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","drag","openHorizontal_1","openVertical_1","isDragActive","openGestureLock","eachAxis","applyConstraints","elastic","min","max","undefined","mix","calcRelativeAxisConstraints","axis","calcViewportAxisConstraints","layoutAxis","constraintsAxis","__read","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","getBoundingBox","box","getBoundingClientRect","convertBoundingBoxToAxisBox","transformBoundingBox","isNear","value","maxDistance","calcLength","calcOrigin","source","v","origin","sourceLength","targetLength","progress","clamp","updateAxisDelta","originPoint","scale","translate","updateBoxDelta","defaultOrigin","originX","originY","calcRelativeAxis","relative","parent","AnimationType","calcRelativeOffsetAxis","child","calcRelativeOffset","checkIfParentHasChanged","prev","next","prevId","getLayoutId","nextId","isDraggable","visualElement","getProps","_dragX","resetAxis","originAxis","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","applyAxisTransforms","final","transforms","_b","key","scaleKey","originKey","axisOrigin","xKeys","yKeys","applyBoxTransforms","finalBox","removePointDelta","removeAxisTransforms","removeAxisDelta","removeBoxTransforms","lastPointerEvent","elementDragControls","WeakMap","VisualElementDragControls","isDragging","currentDirection","constraints","axisBox","props","hasMutatedConstraints","cursorProgress","openGlobalLock","panSession","enableLayoutProjection","set","start","originEvent","_c","snapToCursor","stopMotion","initialPoint","getViewportPointFromEvent","cancelLayout","call","batchLayout","read","write","ancestors","collectProjectingAncestors","children","collectProjectingChildren","tree","__spreadArray","hasManuallySetCursorOrigin","isLayoutDrag","lockProjectionTarget","forEach","resetTransform","updateLayoutMeasurement","restoreTransform","Boolean","getAxisMotionValue","isExternalDrag","rebaseProjectionTarget","measureViewportBox","scheduleUpdateLayoutProjection","projection","axisValue","get","flushSync","preRender","render","postRender","resolveDragConstraints","_d","dragPropagation","flushLayout","onDragStart","animationState","setActive","Drag","_e","dragDirectionLock","lockThreshold","direction","getCurrentDirection","onDirectionLock","updateAxis","onDrag","stop","dragConstraints","layout","getLayoutState","layoutCorrected","isRefObject","resolveRefConstraints","layoutBox","top","left","bottom","right","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","invariant","constraintsBox","measuredConstraints","calcViewportConstraints","userConstraints","convertAxisBoxToBoundingBox","cancelDrag","unlockProjectionTarget","animateDragEnd","onDragEnd","shouldDrag","length_1","center","includes","updateAxisMotionValue","updateVisualElementAxis","nextValue","axisLayout","axisLength","axisProgress","calcConstrainedMinPoint","setProjectionTargetAxis","setProps","_f","_g","dragMomentum","remainingProps","__rest","layoutId","dragKey","toUpperCase","getValue","_dragY","dragTransition","isRelative","projectionParent","getProjectionParent","getLatestValues","convertToRelativeProjection","Object","keys","relativeConstraints_1","targetFinal","isNaN","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","startLayoutAnimation","Promise","all","then","onDragTransitionEnd","stopLayoutAnimation","currentValue","startAnimation","boxProgress","updateConstraints","calcPositionFromProgress","setTimeout","onReady","mount","stopPointerListener","getInstance","dragListener","stopResizeListener","stopLayoutUpdateListener","onLayoutUpdate","prevDragCursor","makeRenderlessComponent","hook","pan","onPan","onPanStart","onPanEnd","onPanSessionStart","hasPanEvents","useRef","useContext","MotionConfigContext","useUnmountEffect","groupDragControls","dragControls","useConstant","subscribe","isCSSVariable","startsWith","cssVariableRegex","getVariableValue","depth","match","exec","parseCSSVariable","token","fallback","resolved","getComputedStyle","getPropertyValue","trim","pixelsToPercent","pixels","varToken","borderCorrectionDefinition","process","latest","_layoutState","px","test","parseFloat","defaultScaleCorrectors","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","treeScale","original","containsCSSVariables","cssVariables","replace","shadow","complex","parse","template","createTransformer","xScale","yScale","averageScale","output","i_1","cssVariable","Animate","_super","apply","arguments","frameTarget","currentAnimationTarget","isAnimating","stopAxisAnimation","isAnimatingTree","animate","originBox","targetBox","visibilityAction","shouldStackAnimate","onComplete","prevParent","config","safeToRemove","prevParentViewportBox","prevViewportBox","parentLayout","isProvidedCorrectDataForRelativeSharedLayout","boxHasMoved","hasMoved","animations","isTargetLocked","animateAxis","setVisibility","VisibilityAction","Show","syncRender","notifyLayoutAnimationComplete","__extends","componentDidMount","animateMotionValue","unsubLayoutReady","layoutSafeToRemove","addScaleCorrection","componentWillUnmount","axisIsEqual","layoutProgress","getProjectionAnimationProgress","clearListeners","frame","p","tweenAxis","unsubscribeProgress","onChange","layoutTransition","getDefaultTransition","defaultLayoutTransition","getValueTransition","React","isZeroBox","zeroAxis","duration","ease","Measure","syncLayout","framerSyncLayout","isSharedLayout","register","onUnmount","remove","getSnapshotBeforeUpdate","syncUpdate","snapshotViewportBox","add","componentDidUpdate","flush","React__default","Component","layoutAnimations","measureLayout","SharedLayoutContext","FramerTreeLayoutContext","createElement","layoutAnimation","usePresence","shallowCompare","Array","isArray","prevLength","variantPriorityOrder","Hover","Tap","Focus","Exit","reversePriorityOrder","reverse","numAnimationTypes","createAnimationState","map","animation","animateVisualElement","animateList","state","createTypeState","createState","allAnimatedKeys","isInitialRender","buildResolvedTypeValues","acc","definition","resolveVariant","transitionEnd","animateChanges","changedActiveType","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","_loop_1","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isActive","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","isAnimationControls","shouldAnimateType","isVariantLabels","variantsHaveChanged","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","delete","needsAnimating","isKeyframesTarget","has","blockInitialAnimation","size","fallbackAnimation_1","fallbackTarget","getBaseTarget","shouldAnimate","initial","resolve","isAnimated","variantChildren","setAnimateFunction","makeAnimator","getState","exit","custom","isPresent","onExitComplete","presenceContext","PresenceContext","createHoverEvent","callback","isNodeOrChild","parentElement","gestureAnimations","tap","onTap","onTapStart","onTapCancel","whileTap","hasPressListeners","isPressing","cancelPointerEndListeners","removePointerEndListener","checkPointerEnd","onPointerUp","onPointerCancel","focus","whileFocus","hover","onHoverStart","onHoverEnd","whileHover","createLayoutState","isHydrated","deltaFinal","deltaTransform","zeroLayout","buildLayoutProjectionTransform","latestTransform","transform","rotate","rotateX","rotateY","identityProjection","buildLayoutProjectionTransformOrigin","names","updateLayoutDeltas","treePath","transformOrigin","treeLength","node","applyTreeDeltas","FlatTree","isDirty","addUniqueItem","removeItem","sort","compareByDepth","treeType","build","makeTargetAnimatable","renderInstance","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","presenceId","visualState","instance","unsubscribeFromLeadVisualElement","crossfader","projectionTargetProgress","removeFromVariantTree","latestValues","renderState","lifecycles","managers","SubscriptionManager","propSubscriptions","clearAllListeners","manager","clear","updatePropListeners","on","propListener","args","_i","notify","createLifecycles","isEnabled","leadProjection","leadLatestValues","layoutState","hasViewportBoxUpdated","values","Map","valueSubscriptions","prevMotionValues","baseTarget","isProjectionReady","triggerBuild","valuesToRender","crossfadedValues","getCrossfadeState","notifyUpdate","updateTreeLayoutProjection","layoutTree","fireUpdateLayoutProjection","initialMotionValues","isMotionValue","isControllingVariants","checkIfControllingVariants","isVariantNode","checkIfVariantNode","path","isVisible","isMounted","newInstance","pointTo","addVariantChild","unmount","updateLayoutProjection","closestVariantNode","getClosestVariantNode","other","getStaticValue","setStaticValue","visibility","scheduleRender","canMutate","addValue","hasValue","removeValue","removeOnChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","bindToMotionValue","defaultValue","motionValue","forEachValue","readValue","setBaseTarget","newProps","prevValue","existingValue","hasAnimated","updateMotionValuesFromProps","getVariant","variants","startAtParent","context_1","numVariantProps","name_1","variantProps","setCrossfader","newCrossfader","relativeTarget","withTransform","viewportBox","notifySetAxisTarget","force","shouldRebase","notifyLayoutReady","relativeOffset","setCurrentViewportBox","notifyLayoutUpdate","prevTreeScaleX","prevTreeScaleY","prevDeltaTransform","notifyViewportBoxUpdate","fireResolveRelativeTargetBox","foundParent","ancestor","resolveRelativeTargetBox","relativeParent","parentProjection","calcRelativeBox","shouldResetTransform","_layoutResetTransform","newLead","onSetAxisTarget","onLayoutAnimationComplete","presence","Presence","Present","Entering","BoundingBoxDimension","positionalKeys","isPositionalKey","setAndResetVelocity","to","isNumOrPxType","number","getPosFromMatrix","matrix","pos","split","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformProps","filter","positionalValues","width","height","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","from","fromType","findDimensionValueType","numKeyframes","removedTransforms","removeNonTranslationalTransform","convertedTarget","changedKeys","originBbox","elementComputedStyle","display","originComputedStyle","targetBbox","convertChangedValueTypes","unitConversion","some","hasPositionalKey","parseDomVariant","HTMLElement","resolveCSSVariables","htmlConfig","domElement","isTransformProp","defaultType","getDefaultValueType","default","computedStyle","compareDocumentPosition","style","transformTemplate","mutableState","vars","transformValues","getOrigin","checkTargetForNewValues","parsed","isProjectionTranform","buildHTMLStyles","renderHTML","htmlVisualElement","svgVisualElement","camelCaseAttributes","camelToDash","getAttribute","_element","buildSVGAttrs","renderSVG","domAnimation","renderer","isSVGComponent","enableHardwareAcceleration","domMax"],"mappings":"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","file":"static/js/34.a84fdbb9.chunk.js","sourcesContent":["function isMouseEvent(event) {\n    // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n    if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n        return !!(event.pointerType === \"mouse\");\n    }\n    return event instanceof MouseEvent;\n}\nfunction isTouchEvent(event) {\n    var hasTouches = !!event.touches;\n    return hasTouches;\n}\n\nexport { isMouseEvent, isTouchEvent };\n","import { isTouchEvent } from '../gestures/utils/event-type.js';\n\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\nfunction filterPrimaryPointer(eventHandler) {\n    return function (event) {\n        var isMouseEvent = event instanceof MouseEvent;\n        var isPrimaryPointer = !isMouseEvent ||\n            (isMouseEvent && event.button === 0);\n        if (isPrimaryPointer) {\n            eventHandler(event);\n        }\n    };\n}\nvar defaultPagePoint = { pageX: 0, pageY: 0 };\nfunction pointFromTouch(e, pointType) {\n    if (pointType === void 0) { pointType = \"page\"; }\n    var primaryTouch = e.touches[0] || e.changedTouches[0];\n    var point = primaryTouch || defaultPagePoint;\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"],\n    };\n}\nfunction pointFromMouse(point, pointType) {\n    if (pointType === void 0) { pointType = \"page\"; }\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"],\n    };\n}\nfunction extractEventInfo(event, pointType) {\n    if (pointType === void 0) { pointType = \"page\"; }\n    return {\n        point: isTouchEvent(event)\n            ? pointFromTouch(event, pointType)\n            : pointFromMouse(event, pointType),\n    };\n}\nfunction getViewportPointFromEvent(event) {\n    return extractEventInfo(event, \"client\");\n}\nvar wrapHandler = function (handler, shouldFilterPrimaryPointer) {\n    if (shouldFilterPrimaryPointer === void 0) { shouldFilterPrimaryPointer = false; }\n    var listener = function (event) {\n        return handler(event, extractEventInfo(event));\n    };\n    return shouldFilterPrimaryPointer\n        ? filterPrimaryPointer(listener)\n        : listener;\n};\n\nexport { extractEventInfo, getViewportPointFromEvent, wrapHandler };\n","import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options) {\n    target.addEventListener(eventName, handler, options);\n    return function () { return target.removeEventListener(eventName, handler, options); };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(function () {\n        var element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };\n","import { useDomEvent, addDomEvent } from './use-dom-event.js';\nimport { wrapHandler } from './event-info.js';\nimport { supportsPointerEvents, supportsTouchEvents, supportsMouseEvents } from './utils.js';\n\nvar mouseEventNames = {\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointercancel: \"mousecancel\",\n    pointerover: \"mouseover\",\n    pointerout: \"mouseout\",\n    pointerenter: \"mouseenter\",\n    pointerleave: \"mouseleave\",\n};\nvar touchEventNames = {\n    pointerdown: \"touchstart\",\n    pointermove: \"touchmove\",\n    pointerup: \"touchend\",\n    pointercancel: \"touchcancel\",\n};\nfunction getPointerEventName(name) {\n    if (supportsPointerEvents()) {\n        return name;\n    }\n    else if (supportsTouchEvents()) {\n        return touchEventNames[name];\n    }\n    else if (supportsMouseEvents()) {\n        return mouseEventNames[name];\n    }\n    return name;\n}\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\nfunction usePointerEvent(ref, eventName, handler, options) {\n    return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\n\nexport { addPointerEvent, usePointerEvent };\n","import { isBrowser } from '../utils/is-browser.js';\n\n// We check for event support via functions in case they've been mocked by a testing suite.\nvar supportsPointerEvents = function () {\n    return isBrowser && window.onpointerdown === null;\n};\nvar supportsTouchEvents = function () {\n    return isBrowser && window.ontouchstart === null;\n};\nvar supportsMouseEvents = function () {\n    return isBrowser && window.onmousedown === null;\n};\n\nexport { supportsMouseEvents, supportsPointerEvents, supportsTouchEvents };\n","var isPoint = function (point) {\n    return point.hasOwnProperty('x') && point.hasOwnProperty('y');\n};\n\nexport { isPoint };\n","import { isPoint } from './is-point.js';\n\nvar isPoint3D = function (point) {\n    return isPoint(point) && point.hasOwnProperty('z');\n};\n\nexport { isPoint3D };\n","import { isPoint } from './is-point.js';\nimport { isPoint3D } from './is-point-3d.js';\nimport { isNum } from './inc.js';\n\nvar distance1D = function (a, b) { return Math.abs(a - b); };\nfunction distance(a, b) {\n    if (isNum(a) && isNum(b)) {\n        return distance1D(a, b);\n    }\n    else if (isPoint(a) && isPoint(b)) {\n        var xDelta = distance1D(a.x, b.x);\n        var yDelta = distance1D(a.y, b.y);\n        var zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;\n        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));\n    }\n}\n\nexport { distance };\n","import { __assign } from 'tslib';\nimport { isMouseEvent, isTouchEvent } from './utils/event-type.js';\nimport { extractEventInfo } from '../events/event-info.js';\nimport sync, { getFrameData, cancelSync } from 'framesync';\nimport { secondsToMilliseconds } from '../utils/time-conversion.js';\nimport { addPointerEvent } from '../events/use-pointer-event.js';\nimport { distance, pipe } from 'popmotion';\n\n/**\n * @internal\n */\nvar PanSession = /** @class */ (function () {\n    function PanSession(event, handlers, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = function () {\n            if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))\n                return;\n            var info = getPanInfo(_this.lastMoveEventInfo, _this.history);\n            var isPanStarted = _this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            var isDistancePastThreshold = distance(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            var point = info.point;\n            var timestamp = getFrameData().timestamp;\n            _this.history.push(__assign(__assign({}, point), { timestamp: timestamp }));\n            var _a = _this.handlers, onStart = _a.onStart, onMove = _a.onMove;\n            if (!isPanStarted) {\n                onStart && onStart(_this.lastMoveEvent, info);\n                _this.startEvent = _this.lastMoveEvent;\n            }\n            onMove && onMove(_this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = function (event, info) {\n            _this.lastMoveEvent = event;\n            _this.lastMoveEventInfo = transformPoint(info, _this.transformPagePoint);\n            // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n            if (isMouseEvent(event) && event.buttons === 0) {\n                _this.handlePointerUp(event, info);\n                return;\n            }\n            // Throttle mouse move event to once per frame\n            sync.update(_this.updatePoint, true);\n        };\n        this.handlePointerUp = function (event, info) {\n            _this.end();\n            var _a = _this.handlers, onEnd = _a.onEnd, onSessionEnd = _a.onSessionEnd;\n            var panInfo = getPanInfo(transformPoint(info, _this.transformPagePoint), _this.history);\n            if (_this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (isTouchEvent(event) && event.touches.length > 1)\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        var info = extractEventInfo(event);\n        var initialInfo = transformPoint(info, this.transformPagePoint);\n        var point = initialInfo.point;\n        var timestamp = getFrameData().timestamp;\n        this.history = [__assign(__assign({}, point), { timestamp: timestamp })];\n        var onSessionStart = handlers.onSessionStart;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    PanSession.prototype.updateHandlers = function (handlers) {\n        this.handlers = handlers;\n    };\n    PanSession.prototype.end = function () {\n        this.removeListeners && this.removeListeners();\n        cancelSync.update(this.updatePoint);\n    };\n    return PanSession;\n}());\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo(_a, history) {\n    var point = _a.point;\n    return {\n        point: point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    var i = history.length - 1;\n    var timestampedPoint = null;\n    var lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    var currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function createLock(name) {\n    var lock = null;\n    return function () {\n        var openLock = function () {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nvar globalHorizontalLock = createLock(\"dragHorizontal\");\nvar globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    var lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        var openHorizontal_1 = globalHorizontalLock();\n        var openVertical_1 = globalVerticalLock();\n        if (openHorizontal_1 && openVertical_1) {\n            lock = function () {\n                openHorizontal_1();\n                openVertical_1();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal_1)\n                openHorizontal_1();\n            if (openVertical_1)\n                openVertical_1();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    var openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","// Call a handler once for each axis\nfunction eachAxis(handler) {\n    return [handler(\"x\"), handler(\"y\")];\n}\n\nexport { eachAxis };\n","import { __read } from 'tslib';\nimport { mix } from 'popmotion';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, _a, elastic) {\n    var min = _a.min, max = _a.max;\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculates a min projection point based on a pointer, pointer progress\n * within the drag target, and constraints.\n *\n * For instance if an element was 100px width, we were dragging from 0.25\n * along this axis, the pointer is at 200px, and there were no constraints,\n * we would calculate a min projection point of 175px.\n */\nfunction calcConstrainedMinPoint(point, length, progress, constraints, elastic) {\n    // Calculate a min point for this axis and apply it to the current pointer\n    var min = point - length * progress;\n    return constraints ? applyConstraints(min, constraints, elastic) : min;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, _a) {\n    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    var _a;\n    var min = constraintsAxis.min - layoutAxis.min;\n    var max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        _a = __read([max, min], 2), min = _a[0], max = _a[1];\n    }\n    return {\n        min: layoutAxis.min + min,\n        max: layoutAxis.min + max,\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate the an axis position based on two axes and a progress value.\n */\nfunction calcPositionFromProgress(axis, constraints, progress) {\n    var axisLength = axis.max - axis.min;\n    var min = mix(constraints.min, constraints.max - axisLength, progress);\n    return { min: min, max: min + axisLength };\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    var relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nvar defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    var _a;\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\n\nexport { applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","import { convertBoundingBoxToAxisBox, transformBoundingBox } from '../../../utils/geometry/index.js';\n\n/**\n * Measure and return the element bounding box.\n *\n * We convert the box into an AxisBox2D to make it easier to work with each axis\n * individually and programmatically.\n *\n * This function optionally accepts a transformPagePoint function which allows us to compensate\n * for, for instance, measuring the element within a scaled plane like a Framer devivce preview component.\n */\nfunction getBoundingBox(element, transformPagePoint) {\n    var box = element.getBoundingClientRect();\n    return convertBoundingBoxToAxisBox(transformBoundingBox(box, transformPagePoint));\n}\n\nexport { getBoundingBox };\n","import { mix, distance, clamp, progress } from 'popmotion';\n\nvar clampProgress = function (v) { return clamp(0, 1, v); };\n/**\n * Returns true if the provided value is within maxDistance of the provided target\n */\nfunction isNear(value, target, maxDistance) {\n    if (target === void 0) { target = 0; }\n    if (maxDistance === void 0) { maxDistance = 0.01; }\n    return distance(value, target) < maxDistance;\n}\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    var origin = 0.5;\n    var sourceLength = calcLength(source);\n    var targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clampProgress(origin);\n}\n/**\n * Update the AxisDelta with a transform that projects source into target.\n *\n * The transform `origin` is optional. If not provided, it'll be automatically\n * calculated based on the relative positions of the two bounding boxes.\n */\nfunction updateAxisDelta(delta, source, target, origin) {\n    if (origin === void 0) { origin = 0.5; }\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate))\n        delta.translate = 0;\n}\n/**\n * Update the BoxDelta with a transform that projects the source into the target.\n *\n * The transform `origin` is optional. If not provided, it'll be automatically\n * calculated based on the relative positions of the two bounding boxes.\n */\nfunction updateBoxDelta(delta, source, target, origin) {\n    updateAxisDelta(delta.x, source.x, target.x, defaultOrigin(origin.originX));\n    updateAxisDelta(delta.y, source.y, target.y, defaultOrigin(origin.originY));\n}\n/**\n * Currently this only accepts numerical origins, measured as 0-1, but could\n * accept pixel values by comparing to the target axis.\n */\nfunction defaultOrigin(origin) {\n    return typeof origin === \"number\" ? origin : 0.5;\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(projection, parentProjection) {\n    calcRelativeAxis(projection.target.x, projection.relativeTarget.x, parentProjection.target.x);\n    calcRelativeAxis(projection.target.y, projection.relativeTarget.y, parentProjection.target.y);\n}\n\nexport { calcOrigin, calcRelativeAxis, calcRelativeBox, isNear, updateAxisDelta, updateBoxDelta };\n","var AnimationType;\n(function (AnimationType) {\n    AnimationType[\"Animate\"] = \"animate\";\n    AnimationType[\"Hover\"] = \"whileHover\";\n    AnimationType[\"Tap\"] = \"whileTap\";\n    AnimationType[\"Drag\"] = \"whileDrag\";\n    AnimationType[\"Focus\"] = \"whileFocus\";\n    AnimationType[\"Exit\"] = \"exit\";\n})(AnimationType || (AnimationType = {}));\n\nexport { AnimationType };\n","import { mix } from 'popmotion';\n\nfunction tweenAxis(target, prev, next, p) {\n    target.min = mix(prev.min, next.min, p);\n    target.max = mix(prev.max, next.max, p);\n}\nfunction calcRelativeOffsetAxis(parent, child) {\n    return {\n        min: child.min - parent.min,\n        max: child.max - parent.min,\n    };\n}\nfunction calcRelativeOffset(parent, child) {\n    return {\n        x: calcRelativeOffsetAxis(parent.x, child.x),\n        y: calcRelativeOffsetAxis(parent.y, child.y),\n    };\n}\nfunction checkIfParentHasChanged(prev, next) {\n    var prevId = prev.getLayoutId();\n    var nextId = next.getLayoutId();\n    return prevId !== nextId || (nextId === undefined && prev !== next);\n}\n\nexport { calcRelativeOffset, calcRelativeOffsetAxis, checkIfParentHasChanged, tweenAxis };\n","function isDraggable(visualElement) {\n    var _a = visualElement.getProps(), drag = _a.drag, _dragX = _a._dragX;\n    return drag && !_dragX;\n}\n\nexport { isDraggable };\n","import { __read } from 'tslib';\nimport { mix } from 'popmotion';\nimport { isDraggable } from '../../render/utils/is-draggable.js';\n\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction resetAxis(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction resetBox(box, originBox) {\n    resetAxis(box.x, originBox.x);\n    resetAxis(box.y, originBox.y);\n}\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    var distanceFromOrigin = point - originPoint;\n    var scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate, scale, originPoint, boxScale) {\n    if (translate === void 0) { translate = 0; }\n    if (scale === void 0) { scale = 1; }\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, _a) {\n    var x = _a.x, y = _a.y;\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction applyAxisTransforms(final, axis, transforms, _a) {\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    // Copy the current axis to the final axis before mutation\n    final.min = axis.min;\n    final.max = axis.max;\n    var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    var originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(final, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction applyBoxTransforms(finalBox, box, transforms) {\n    applyAxisTransforms(finalBox.x, box.x, transforms, xKeys);\n    applyAxisTransforms(finalBox.y, box.y, transforms, yKeys);\n}\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate, scale, origin, boxScale) {\n    if (translate === void 0) { translate = 0; }\n    if (scale === void 0) { scale = 1; }\n    if (origin === void 0) { origin = 0.5; }\n    var originPoint = mix(axis.min, axis.max, origin) - translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, _a) {\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale);\n}\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms) {\n    removeAxisTransforms(box.x, transforms, xKeys);\n    removeAxisTransforms(box.y, transforms, yKeys);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath) {\n    var treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    var node;\n    var delta;\n    for (var i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.getLayoutState().delta;\n        // Incoporate each ancestor's scale into a culmulative treeScale for this component\n        treeScale.x *= delta.x.scale;\n        treeScale.y *= delta.y.scale;\n        // Apply each ancestor's calculated delta into this component's recorded layout box\n        applyBoxDelta(box, delta);\n        // If this is a draggable ancestor, also incorporate the node's transform to the layout box\n        if (isDraggable(node)) {\n            applyBoxTransforms(box, box, node.getLatestValues());\n        }\n    }\n}\n\nexport { applyAxisDelta, applyAxisTransforms, applyBoxDelta, applyBoxTransforms, applyPointDelta, applyTreeDeltas, removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta, resetAxis, resetBox, scalePoint };\n","import { __rest, __assign, __spreadArray, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.js';\nimport { getGlobalLock } from './utils/lock.js';\nimport { isRefObject } from '../../utils/is-ref-object.js';\nimport { addPointerEvent } from '../../events/use-pointer-event.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { getViewportPointFromEvent } from '../../events/event-info.js';\nimport { axisBox, convertAxisBoxToBoundingBox, convertBoundingBoxToAxisBox } from '../../utils/geometry/index.js';\nimport { eachAxis } from '../../utils/each-axis.js';\nimport { calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, defaultElastic } from './utils/constraints.js';\nimport { getBoundingBox } from '../../render/dom/projection/measure.js';\nimport { calcOrigin } from '../../utils/geometry/delta-calc.js';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { collectProjectingAncestors, updateLayoutMeasurement, collectProjectingChildren } from '../../render/dom/projection/utils.js';\nimport { progress } from 'popmotion';\nimport { convertToRelativeProjection } from '../../render/dom/projection/convert-to-relative.js';\nimport { calcRelativeOffset } from '../../motion/features/layout/utils.js';\nimport { flushLayout, batchLayout } from '../../render/dom/utils/batch-layout.js';\nimport { flushSync } from 'framesync';\n\nvar elementDragControls = new WeakMap();\n/**\n *\n */\nvar lastPointerEvent;\nvar VisualElementDragControls = /** @class */ (function () {\n    function VisualElementDragControls(_a) {\n        var visualElement = _a.visualElement;\n        /**\n         * Track whether we're currently dragging.\n         *\n         * @internal\n         */\n        this.isDragging = false;\n        /**\n         * The current direction of drag, or `null` if both.\n         *\n         * @internal\n         */\n        this.currentDirection = null;\n        /**\n         * The permitted boundaries of travel, in pixels.\n         *\n         * @internal\n         */\n        this.constraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         *\n         * @internal\n         */\n        this.elastic = axisBox();\n        /**\n         * A reference to the host component's latest props.\n         *\n         * @internal\n         */\n        this.props = {};\n        /**\n         * @internal\n         */\n        this.hasMutatedConstraints = false;\n        /**\n         * Track the initial position of the cursor relative to the dragging element\n         * when dragging starts as a value of 0-1 on each axis. We then use this to calculate\n         * an ideal bounding box for the VisualElement renderer to project into every frame.\n         *\n         * @internal\n         */\n        this.cursorProgress = {\n            x: 0.5,\n            y: 0.5,\n        };\n        // When updating _dragX, or _dragY instead of the VisualElement,\n        // persist their values between drag gestures.\n        this.originPoint = {};\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        /**\n         * @internal\n         */\n        this.panSession = null;\n        this.visualElement = visualElement;\n        this.visualElement.enableLayoutProjection();\n        elementDragControls.set(visualElement, this);\n    }\n    /**\n     * Instantiate a PanSession for the drag gesture\n     *\n     * @public\n     */\n    VisualElementDragControls.prototype.start = function (originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c, cursorProgress = _b.cursorProgress;\n        var onSessionStart = function (event) {\n            var _a;\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopMotion();\n            /**\n             * Save the initial point. We'll use this to calculate the pointer's position rather\n             * than the one we receive when the gesture actually starts. By then, the pointer will\n             * have already moved, and the perception will be of the pointer \"slipping\" across the element\n             */\n            var initialPoint = getViewportPointFromEvent(event).point;\n            (_a = _this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(_this);\n            _this.cancelLayout = batchLayout(function (read, write) {\n                var ancestors = collectProjectingAncestors(_this.visualElement);\n                var children = collectProjectingChildren(_this.visualElement);\n                var tree = __spreadArray(__spreadArray([], __read(ancestors)), __read(children));\n                var hasManuallySetCursorOrigin = false;\n                /**\n                 * Apply a simple lock to the projection target. This ensures no animations\n                 * can run on the projection box while this lock is active.\n                 */\n                _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();\n                write(function () {\n                    tree.forEach(function (element) { return element.resetTransform(); });\n                });\n                read(function () {\n                    updateLayoutMeasurement(_this.visualElement);\n                    children.forEach(updateLayoutMeasurement);\n                });\n                write(function () {\n                    tree.forEach(function (element) { return element.restoreTransform(); });\n                    if (snapToCursor) {\n                        hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);\n                    }\n                });\n                read(function () {\n                    var isRelativeDrag = Boolean(_this.getAxisMotionValue(\"x\") && !_this.isExternalDrag());\n                    if (!isRelativeDrag) {\n                        _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));\n                    }\n                    _this.visualElement.scheduleUpdateLayoutProjection();\n                    /**\n                     * When dragging starts, we want to find where the cursor is relative to the bounding box\n                     * of the element. Every frame, we calculate a new bounding box using this relative position\n                     * and let the visualElement renderer figure out how to reproject the element into this bounding\n                     * box.\n                     *\n                     * By doing it this way, rather than applying an x/y transform directly to the element,\n                     * we can ensure the component always visually sticks to the cursor as we'd expect, even\n                     * if the DOM element itself changes layout as a result of React updates the user might\n                     * make based on the drag position.\n                     */\n                    var projection = _this.visualElement.projection;\n                    eachAxis(function (axis) {\n                        if (!hasManuallySetCursorOrigin) {\n                            var _a = projection.target[axis], min = _a.min, max = _a.max;\n                            _this.cursorProgress[axis] = cursorProgress\n                                ? cursorProgress[axis]\n                                : progress(min, max, initialPoint[axis]);\n                        }\n                        /**\n                         * If we have external drag MotionValues, record their origin point. On pointermove\n                         * we'll apply the pan gesture offset directly to this value.\n                         */\n                        var axisValue = _this.getAxisMotionValue(axis);\n                        if (axisValue) {\n                            _this.originPoint[axis] = axisValue.get();\n                        }\n                    });\n                });\n                write(function () {\n                    flushSync.update();\n                    flushSync.preRender();\n                    flushSync.render();\n                    flushSync.postRender();\n                });\n                read(function () { return _this.resolveDragConstraints(); });\n            });\n        };\n        var onStart = function (event, info) {\n            var _a, _b, _c;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _d = _this.props, drag = _d.drag, dragPropagation = _d.dragPropagation;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock)\n                    _this.openGlobalLock();\n                _this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock)\n                    return;\n            }\n            flushLayout();\n            // Set current drag status\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            // Fire onDragStart event\n            (_b = (_a = _this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n            (_c = _this.visualElement.animationState) === null || _c === void 0 ? void 0 : _c.setActive(AnimationType.Drag, true);\n        };\n        var onMove = function (event, info) {\n            var _a, _b, _c, _d;\n            var _e = _this.props, dragPropagation = _e.dragPropagation, dragDirectionLock = _e.dragDirectionLock;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock)\n                return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    (_b = (_a = _this.props).onDirectionLock) === null || _b === void 0 ? void 0 : _b.call(_a, _this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", info.point, offset);\n            _this.updateAxis(\"y\", info.point, offset);\n            // Fire onDrag event\n            (_d = (_c = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n            // Update the last pointer event\n            lastPointerEvent = event;\n        };\n        var onSessionEnd = function (event, info) {\n            return _this.stop(event, info);\n        };\n        var transformPagePoint = this.props.transformPagePoint;\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onSessionEnd: onSessionEnd,\n        }, { transformPagePoint: transformPagePoint });\n    };\n    VisualElementDragControls.prototype.resolveDragConstraints = function () {\n        var _this = this;\n        var _a = this.props, dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        var layout = this.visualElement.getLayoutState().layoutCorrected;\n        if (dragConstraints) {\n            this.constraints = isRefObject(dragConstraints)\n                ? this.resolveRefConstraints(layout, dragConstraints)\n                : calcRelativeConstraints(layout, dragConstraints);\n        }\n        else {\n            this.constraints = false;\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (this.constraints && !this.hasMutatedConstraints) {\n            eachAxis(function (axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = rebaseAxisConstraints(layout[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function (layoutBox, constraints) {\n        var _a = this.props, onMeasureDragConstraints = _a.onMeasureDragConstraints, transformPagePoint = _a.transformPagePoint;\n        var constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);\n        var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.cancelDrag = function () {\n        var _a, _b;\n        this.visualElement.unlockProjectionTarget();\n        (_a = this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.isDragging = false;\n        this.panSession && this.panSession.end();\n        this.panSession = null;\n        if (!this.props.dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.stop = function (event, info) {\n        var _a, _b, _c;\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = null;\n        var isDragging = this.isDragging;\n        this.cancelDrag();\n        if (!isDragging)\n            return;\n        var velocity = info.velocity;\n        this.animateDragEnd(velocity);\n        (_c = (_b = this.props).onDragEnd) === null || _c === void 0 ? void 0 : _c.call(_b, event, info);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function (point) {\n        var _this = this;\n        return eachAxis(function (axis) {\n            var drag = _this.props.drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection))\n                return;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var box = _this.visualElement.getLayoutState().layout;\n                var length_1 = box[axis].max - box[axis].min;\n                var center = box[axis].min + length_1 / 2;\n                var offset = point[axis] - center;\n                _this.originPoint[axis] = point[axis];\n                axisValue.set(offset);\n            }\n            else {\n                _this.cursorProgress[axis] = 0.5;\n                return true;\n            }\n        }).includes(true);\n    };\n    /**\n     * Update the specified axis with the latest pointer information.\n     */\n    VisualElementDragControls.prototype.updateAxis = function (axis, point, offset) {\n        var drag = this.props.drag;\n        // If we're not dragging this axis, do an early return.\n        if (!shouldDrag(axis, drag, this.currentDirection))\n            return;\n        return this.getAxisMotionValue(axis)\n            ? this.updateAxisMotionValue(axis, offset)\n            : this.updateVisualElementAxis(axis, point);\n    };\n    VisualElementDragControls.prototype.updateAxisMotionValue = function (axis, offset) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!offset || !axisValue)\n            return;\n        var nextValue = this.originPoint[axis] + offset[axis];\n        var update = this.constraints\n            ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis])\n            : nextValue;\n        axisValue.set(update);\n    };\n    VisualElementDragControls.prototype.updateVisualElementAxis = function (axis, point) {\n        var _a;\n        // Get the actual layout bounding box of the element\n        var axisLayout = this.visualElement.getLayoutState().layout[axis];\n        // Calculate its current length. In the future we might want to lerp this to animate\n        // between lengths if the layout changes as we change the DOM\n        var axisLength = axisLayout.max - axisLayout.min;\n        // Get the initial progress that the pointer sat on this axis on gesture start.\n        var axisProgress = this.cursorProgress[axis];\n        // Calculate a new min point based on the latest pointer position, constraints and elastic\n        var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]);\n        // Update the axis viewport target with this new min and the length\n        this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);\n    };\n    VisualElementDragControls.prototype.setProps = function (_a) {\n        var _b = _a.drag, drag = _b === void 0 ? false : _b, _c = _a.dragDirectionLock, dragDirectionLock = _c === void 0 ? false : _c, _d = _a.dragPropagation, dragPropagation = _d === void 0 ? false : _d, _e = _a.dragConstraints, dragConstraints = _e === void 0 ? false : _e, _f = _a.dragElastic, dragElastic = _f === void 0 ? defaultElastic : _f, _g = _a.dragMomentum, dragMomentum = _g === void 0 ? true : _g, remainingProps = __rest(_a, [\"drag\", \"dragDirectionLock\", \"dragPropagation\", \"dragConstraints\", \"dragElastic\", \"dragMomentum\"]);\n        this.props = __assign({ drag: drag,\n            dragDirectionLock: dragDirectionLock,\n            dragPropagation: dragPropagation,\n            dragConstraints: dragConstraints,\n            dragElastic: dragElastic,\n            dragMomentum: dragMomentum }, remainingProps);\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - If the component will perform layout animations, we output the gesture to the component's\n     *      visual bounding box\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n        var _a = this.props, layout = _a.layout, layoutId = _a.layoutId;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        if (this.props[dragKey]) {\n            return this.props[dragKey];\n        }\n        else if (!layout && layoutId === undefined) {\n            return this.visualElement.getValue(axis, 0);\n        }\n    };\n    VisualElementDragControls.prototype.isLayoutDrag = function () {\n        return !this.getAxisMotionValue(\"x\");\n    };\n    VisualElementDragControls.prototype.isExternalDrag = function () {\n        var _a = this.props, _dragX = _a._dragX, _dragY = _a._dragY;\n        return _dragX || _dragY;\n    };\n    VisualElementDragControls.prototype.animateDragEnd = function (velocity) {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition;\n        /**\n         * Everything beyond the drag gesture should be performed with\n         * relative projection so children stay in sync with their parent element.\n         */\n        var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());\n        /**\n         * If we had previously resolved constraints relative to the viewport,\n         * we need to also convert those to a relative coordinate space for the animation\n         */\n        var constraints = this.constraints || {};\n        if (isRelative &&\n            Object.keys(constraints).length &&\n            this.isLayoutDrag()) {\n            var projectionParent = this.visualElement.getProjectionParent();\n            if (projectionParent) {\n                var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);\n                eachAxis(function (axis) {\n                    var _a = relativeConstraints_1[axis], min = _a.min, max = _a.max;\n                    constraints[axis] = {\n                        min: isNaN(min) ? undefined : min,\n                        max: isNaN(max) ? undefined : max,\n                    };\n                });\n            }\n        }\n        var momentumAnimations = eachAxis(function (axis) {\n            var _a;\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = __assign(__assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness: bounceStiffness,\n                bounceDamping: bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.getAxisMotionValue(axis)\n                ? _this.startAxisValueAnimation(axis, inertia)\n                : _this.visualElement.startLayoutAnimation(axis, inertia, isRelative);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(function () {\n            var _a, _b;\n            (_b = (_a = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n    };\n    VisualElementDragControls.prototype.stopMotion = function () {\n        var _this = this;\n        eachAxis(function (axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            axisValue\n                ? axisValue.stop()\n                : _this.visualElement.stopLayoutAnimation();\n        });\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!axisValue)\n            return;\n        var currentValue = axisValue.get();\n        axisValue.set(currentValue);\n        axisValue.set(currentValue); // Set twice to hard-reset velocity\n        return startAnimation(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.scalePoint = function () {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragConstraints = _a.dragConstraints;\n        if (!isRefObject(dragConstraints) || !this.constraintsBox)\n            return;\n        // Stop any current animations as there can be some visual glitching if we resize mid animation\n        this.stopMotion();\n        // Record the relative progress of the targetBox relative to the constraintsBox\n        var boxProgress = { x: 0, y: 0 };\n        eachAxis(function (axis) {\n            boxProgress[axis] = calcOrigin(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);\n        });\n        /**\n         * For each axis, calculate the current progress of the layout axis within the constraints.\n         * Then, using the latest layout and constraints measurements, reposition the new layout axis\n         * proportionally within the constraints.\n         */\n        this.updateConstraints(function () {\n            eachAxis(function (axis) {\n                if (!shouldDrag(axis, drag, null))\n                    return;\n                // Calculate the position of the targetBox relative to the constraintsBox using the\n                // previously calculated progress\n                var _a = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a.min, max = _a.max;\n                _this.visualElement.setProjectionTargetAxis(axis, min, max);\n            });\n        });\n        /**\n         * If any other draggable components are queuing the same tasks synchronously\n         * this will wait until they've all been scheduled before flushing.\n         */\n        setTimeout(flushLayout, 1);\n    };\n    VisualElementDragControls.prototype.updateConstraints = function (onReady) {\n        var _this = this;\n        this.cancelLayout = batchLayout(function (read, write) {\n            var ancestors = collectProjectingAncestors(_this.visualElement);\n            write(function () {\n                return ancestors.forEach(function (element) { return element.resetTransform(); });\n            });\n            read(function () { return updateLayoutMeasurement(_this.visualElement); });\n            write(function () {\n                return ancestors.forEach(function (element) { return element.restoreTransform(); });\n            });\n            read(function () {\n                _this.resolveDragConstraints();\n            });\n            if (onReady)\n                write(onReady);\n        });\n    };\n    VisualElementDragControls.prototype.mount = function (visualElement) {\n        var _this = this;\n        var element = visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n            var _a = _this.props, drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        var stopResizeListener = addDomEvent(window, \"resize\", function () {\n            _this.scalePoint();\n        });\n        /**\n         * Ensure drag constraints are resolved correctly relative to the dragging element\n         * whenever its layout changes.\n         */\n        var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function () {\n            if (_this.isDragging) {\n                _this.resolveDragConstraints();\n            }\n        });\n        /**\n         * If the previous component with this same layoutId was dragging at the time\n         * it was unmounted, we want to continue the same gesture on this component.\n         */\n        var prevDragCursor = visualElement.prevDragCursor;\n        if (prevDragCursor) {\n            this.start(lastPointerEvent, { cursorProgress: prevDragCursor });\n        }\n        /**\n         * Return a function that will teardown the drag gesture\n         */\n        return function () {\n            stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();\n            stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n            _this.cancelDrag();\n        };\n    };\n    return VisualElementDragControls;\n}());\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) { lockThreshold = 10; }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { calcRelativeOffset } from '../../../motion/features/layout/utils.js';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { removeBoxTransforms } from '../../../utils/geometry/delta-apply.js';\n\n/**\n * Returns a boolean stating whether or not we converted the projection\n * to relative projection.\n */\nfunction convertToRelativeProjection(visualElement, isLayoutDrag) {\n    if (isLayoutDrag === void 0) { isLayoutDrag = true; }\n    var projectionParent = visualElement.getProjectionParent();\n    if (!projectionParent)\n        return false;\n    var offset;\n    if (isLayoutDrag) {\n        offset = calcRelativeOffset(projectionParent.projection.target, visualElement.projection.target);\n        removeBoxTransforms(offset, projectionParent.getLatestValues());\n    }\n    else {\n        offset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);\n    }\n    eachAxis(function (axis) {\n        return visualElement.setProjectionTargetAxis(axis, offset[axis].min, offset[axis].max, true);\n    });\n    return true;\n}\n\nexport { convertToRelativeProjection };\n","var makeRenderlessComponent = function (hook) { return function (props) {\n    hook(props);\n    return null;\n}; };\n\nexport { makeRenderlessComponent };\n","import { useDrag } from '../../gestures/drag/use-drag.js';\nimport { usePanGesture } from '../../gestures/use-pan-gesture.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar drag = {\n    pan: makeRenderlessComponent(usePanGesture),\n    drag: makeRenderlessComponent(useDrag),\n};\n\nexport { drag };\n","import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { PanSession } from './PanSession.js';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @internalremarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture(_a) {\n    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement = _a.visualElement;\n    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    var panSession = useRef(null);\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: function (event, info) {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(function () {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint: transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(function () { return panSession.current && panSession.current.end(); });\n}\n\nexport { usePanGesture };\n","import { __assign } from 'tslib';\nimport { useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.js';\nimport { VisualElementDragControls } from './VisualElementDragControls.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\nfunction useDrag(props) {\n    var groupDragControls = props.dragControls, visualElement = props.visualElement;\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var dragControls = useConstant(function () {\n        return new VisualElementDragControls({\n            visualElement: visualElement,\n        });\n    });\n    dragControls.setProps(__assign(__assign({}, props), { transformPagePoint: transformPagePoint }));\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    useEffect(function () { return groupDragControls && groupDragControls.subscribe(dragControls); }, [dragControls]);\n    // Mount the drag controls with the visualElement\n    useEffect(function () { return dragControls.mount(visualElement); }, []);\n}\n\nexport { useDrag };\n","import { __rest, __assign, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    var match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    var _a = __read(match, 3), token = _a[1], fallback = _a[2];\n    return [token, fallback];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element, depth) {\n    if (depth === void 0) { depth = 1; }\n    invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\" + current + \"\\\". This may indicate a circular fallback dependency.\");\n    var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    var resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, _a, transitionEnd) {\n    var _b;\n    var target = __rest(_a, []);\n    var element = visualElement.getInstance();\n    if (!(element instanceof HTMLElement))\n        return { target: target, transitionEnd: transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = __assign({}, transitionEnd);\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.forEachValue(function (value) {\n        var current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        var resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (var key in target) {\n        var current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        var resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd)\n            (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : (transitionEnd[key] = current);\n    }\n    return { target: target, transitionEnd: transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","import { __assign } from 'tslib';\nimport { complex, px } from 'style-value-types';\nimport { mix } from 'popmotion';\nimport { cssVariableRegex } from '../utils/css-variables-conversion.js';\n\nfunction pixelsToPercent(pixels, axis) {\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nfunction correctBorderRadius(latest, _layoutState, _a) {\n    var target = _a.target;\n    /**\n     * If latest is a string, if it's a percentage we can return immediately as it's\n     * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n     */\n    if (typeof latest === \"string\") {\n        if (px.test(latest)) {\n            latest = parseFloat(latest);\n        }\n        else {\n            return latest;\n        }\n    }\n    /**\n     * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n     * pixel value as a percentage of each axis\n     */\n    var x = pixelsToPercent(latest, target.x);\n    var y = pixelsToPercent(latest, target.y);\n    return x + \"% \" + y + \"%\";\n}\nvar varToken = \"_$css\";\nfunction correctBoxShadow(latest, _a) {\n    var delta = _a.delta, treeScale = _a.treeScale;\n    var original = latest;\n    /**\n     * We need to first strip and store CSS variables from the string.\n     */\n    var containsCSSVariables = latest.includes(\"var(\");\n    var cssVariables = [];\n    if (containsCSSVariables) {\n        latest = latest.replace(cssVariableRegex, function (match) {\n            cssVariables.push(match);\n            return varToken;\n        });\n    }\n    var shadow = complex.parse(latest);\n    // TODO: Doesn't support multiple shadows\n    if (shadow.length > 5)\n        return original;\n    var template = complex.createTransformer(latest);\n    var offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n    // Calculate the overall context scale\n    var xScale = delta.x.scale * treeScale.x;\n    var yScale = delta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\n     * Ideally we'd correct x and y scales individually, but because blur and\n     * spread apply to both we have to take a scale average and apply that instead.\n     * We could potentially improve the outcome of this by incorporating the ratio between\n     * the two scales.\n     */\n    var averageScale = mix(xScale, yScale, 0.5);\n    // Blur\n    if (typeof shadow[2 + offset] === \"number\")\n        shadow[2 + offset] /= averageScale;\n    // Spread\n    if (typeof shadow[3 + offset] === \"number\")\n        shadow[3 + offset] /= averageScale;\n    var output = template(shadow);\n    if (containsCSSVariables) {\n        var i_1 = 0;\n        output = output.replace(varToken, function () {\n            var cssVariable = cssVariables[i_1];\n            i_1++;\n            return cssVariable;\n        });\n    }\n    return output;\n}\nvar borderCorrectionDefinition = {\n    process: correctBorderRadius,\n};\nvar defaultScaleCorrectors = {\n    borderRadius: __assign(__assign({}, borderCorrectionDefinition), { applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ] }),\n    borderTopLeftRadius: borderCorrectionDefinition,\n    borderTopRightRadius: borderCorrectionDefinition,\n    borderBottomLeftRadius: borderCorrectionDefinition,\n    borderBottomRightRadius: borderCorrectionDefinition,\n    boxShadow: {\n        process: correctBoxShadow,\n    },\n};\n\nexport { correctBorderRadius, correctBoxShadow, defaultScaleCorrectors, pixelsToPercent };\n","import { __extends, __rest, __assign, __read } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation, getValueTransition } from '../../../animation/utils/transitions.js';\nimport { checkIfParentHasChanged, calcRelativeOffset, tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\n\nvar progressTarget = 1000;\nvar Animate = /** @class */ (function (_super) {\n    __extends(Animate, _super);\n    function Animate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A mutable object that tracks the target viewport box\n         * for the current animation frame.\n         */\n        _this.frameTarget = axisBox();\n        /**\n         * The current animation target, we use this to check whether to start\n         * a new animation or continue the existing one.\n         */\n        _this.currentAnimationTarget = axisBox();\n        /**\n         * Track whether we're animating this axis.\n         */\n        _this.isAnimating = {\n            x: false,\n            y: false,\n        };\n        _this.stopAxisAnimation = {\n            x: undefined,\n            y: undefined,\n        };\n        _this.isAnimatingTree = false;\n        _this.animate = function (target, origin, _a) {\n            if (_a === void 0) { _a = {}; }\n            var originBox = _a.originBox, targetBox = _a.targetBox, visibilityAction = _a.visibilityAction, shouldStackAnimate = _a.shouldStackAnimate, onComplete = _a.onComplete, prevParent = _a.prevParent, config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\", \"prevParent\"]);\n            var _b = _this.props, visualElement = _b.visualElement, layout = _b.layout;\n            /**\n             * Early return if we've been instructed not to animate this render.\n             */\n            if (shouldStackAnimate === false) {\n                _this.isAnimatingTree = false;\n                return _this.safeToRemove();\n            }\n            /**\n             * Prioritise tree animations\n             */\n            if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n                return;\n            }\n            else if (shouldStackAnimate) {\n                _this.isAnimatingTree = true;\n            }\n            /**\n             * Allow the measured origin (prev bounding box) and target (actual layout) to be\n             * overridden by the provided config.\n             */\n            origin = originBox || origin;\n            target = targetBox || target;\n            /**\n             * If this element has a projecting parent, there's an opportunity to animate\n             * it relatively to that parent rather than relatively to the viewport. This\n             * allows us to add orchestrated animations.\n             */\n            var isRelative = false;\n            var projectionParent = visualElement.getProjectionParent();\n            if (projectionParent) {\n                var prevParentViewportBox = projectionParent.prevViewportBox;\n                var parentLayout = projectionParent.getLayoutState().layout;\n                /**\n                 * If we're being provided a previous parent VisualElement by AnimateSharedLayout\n                 */\n                if (prevParent) {\n                    /**\n                     * If we've been provided an explicit target box it means we're animating back\n                     * to this previous parent. So we can make a relative box by comparing to the previous\n                     * parent's layout\n                     */\n                    if (targetBox) {\n                        parentLayout = prevParent.getLayoutState().layout;\n                    }\n                    /**\n                     * Likewise if we've been provided an explicit origin box it means we're\n                     * animating out from a different element. So we should figure out where that was\n                     * on screen relative to the new parent element.\n                     */\n                    if (originBox &&\n                        !checkIfParentHasChanged(prevParent, projectionParent) &&\n                        prevParent.prevViewportBox) {\n                        prevParentViewportBox = prevParent.prevViewportBox;\n                    }\n                }\n                if (prevParentViewportBox &&\n                    isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {\n                    isRelative = true;\n                    origin = calcRelativeOffset(prevParentViewportBox, origin);\n                    target = calcRelativeOffset(parentLayout, target);\n                }\n            }\n            var boxHasMoved = hasMoved(origin, target);\n            var animations = eachAxis(function (axis) {\n                var _a, _b;\n                /**\n                 * If layout is set to \"position\", we can resize the origin box based on the target\n                 * box and only animate its position.\n                 */\n                if (layout === \"position\") {\n                    var targetLength = target[axis].max - target[axis].min;\n                    origin[axis].max = origin[axis].min + targetLength;\n                }\n                if (visualElement.projection.isTargetLocked) {\n                    return;\n                }\n                else if (visibilityAction !== undefined) {\n                    visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n                }\n                else if (boxHasMoved) {\n                    // If the box has moved, animate between it's current visual state and its\n                    // final state\n                    return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config), { isRelative: isRelative }));\n                }\n                else {\n                    (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n                    // If the box has remained in the same place, immediately set the axis target\n                    // to the final desired state\n                    return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);\n                }\n            });\n            // Force a render to ensure there's no flash of uncorrected bounding box.\n            visualElement.syncRender();\n            /**\n             * If this visualElement isn't present (ie it's been removed from the tree by the user but\n             * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n             * have successfully finished.\n             */\n            return Promise.all(animations).then(function () {\n                _this.isAnimatingTree = false;\n                onComplete && onComplete();\n                visualElement.notifyLayoutAnimationComplete();\n            });\n        };\n        return _this;\n    }\n    Animate.prototype.componentDidMount = function () {\n        var _this = this;\n        var visualElement = this.props.visualElement;\n        visualElement.animateMotionValue = startAnimation;\n        visualElement.enableLayoutProjection();\n        this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n        visualElement.layoutSafeToRemove = function () { return _this.safeToRemove(); };\n        addScaleCorrection(defaultScaleCorrectors);\n    };\n    Animate.prototype.componentWillUnmount = function () {\n        var _this = this;\n        this.unsubLayoutReady();\n        eachAxis(function (axis) { var _a, _b; return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a); });\n    };\n    /**\n     * TODO: This manually performs animations on the visualElement's layout progress\n     * values. It'd be preferable to amend the startLayoutAxisAnimation\n     * API to accept more custom animations like this.\n     */\n    Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n        var _this = this;\n        var _b, _c;\n        var _d = _a === void 0 ? {} : _a, transition = _d.transition, isRelative = _d.isRelative;\n        /**\n         * If we're not animating to a new target, don't run this animation\n         */\n        if (this.isAnimating[axis] &&\n            axisIsEqual(target, this.currentAnimationTarget[axis])) {\n            return;\n        }\n        (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n        this.isAnimating[axis] = true;\n        var visualElement = this.props.visualElement;\n        var frameTarget = this.frameTarget[axis];\n        var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n        /**\n         * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n         * be re-incoporated into a subsequent spring animation.\n         */\n        layoutProgress.clearListeners();\n        layoutProgress.set(0);\n        layoutProgress.set(0);\n        /**\n         * Create an animation function to run once per frame. This will tween the visual bounding box from\n         * origin to target using the latest progress value.\n         */\n        var frame = function () {\n            // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n            var p = layoutProgress.get() / progressTarget;\n            // Tween the axis and update the visualElement with the latest values\n            tweenAxis(frameTarget, origin, target, p);\n            visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);\n        };\n        // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n        frame();\n        // Create a function to stop animation on this specific axis\n        var unsubscribeProgress = layoutProgress.onChange(frame);\n        this.stopAxisAnimation[axis] = function () {\n            _this.isAnimating[axis] = false;\n            layoutProgress.stop();\n            unsubscribeProgress();\n        };\n        this.currentAnimationTarget[axis] = target;\n        var layoutTransition = transition ||\n            visualElement.getDefaultTransition() ||\n            defaultLayoutTransition;\n        // Start the animation on this axis\n        var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, \"layout\")).then(this.stopAxisAnimation[axis]);\n        return animation;\n    };\n    Animate.prototype.safeToRemove = function () {\n        var _a, _b;\n        (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    Animate.prototype.render = function () {\n        return null;\n    };\n    return Animate;\n}(React.Component));\nfunction AnimateLayoutContextProvider(props) {\n    var _a = __read(usePresence(), 2), safeToRemove = _a[1];\n    return React.createElement(Animate, __assign({}, props, { safeToRemove: safeToRemove }));\n}\nfunction hasMoved(a, b) {\n    return (!isZeroBox(a) &&\n        !isZeroBox(b) &&\n        (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y)));\n}\nvar zeroAxis = { min: 0, max: 0 };\nfunction isZeroBox(a) {\n    return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\nfunction axisIsEqual(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {\n    return prevParent || (!prevParent && !(originBox || targetBox));\n}\n\nexport { AnimateLayoutContextProvider };\n","import { __extends, __assign } from 'tslib';\nimport React__default, { useContext } from 'react';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\nimport { snapshotViewportBox } from '../../../render/dom/projection/utils.js';\n\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\nvar Measure = /** @class */ (function (_super) {\n    __extends(Measure, _super);\n    function Measure() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * If this is a child of a SyncContext, register the VisualElement with it on mount.\n     */\n    Measure.prototype.componentDidMount = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, framerSyncLayout = _a.framerSyncLayout, visualElement = _a.visualElement;\n        isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n        isSharedLayout(framerSyncLayout) &&\n            framerSyncLayout.register(visualElement);\n        visualElement.onUnmount(function () {\n            if (isSharedLayout(syncLayout)) {\n                syncLayout.remove(visualElement);\n            }\n            if (isSharedLayout(framerSyncLayout)) {\n                framerSyncLayout.remove(visualElement);\n            }\n        });\n    };\n    /**\n     * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n     * handle the snapshotting.\n     *\n     * If it is stand-alone component, add it to the batcher.\n     */\n    Measure.prototype.getSnapshotBeforeUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (isSharedLayout(syncLayout)) {\n            syncLayout.syncUpdate();\n        }\n        else {\n            snapshotViewportBox(visualElement);\n            syncLayout.add(visualElement);\n        }\n        return null;\n    };\n    Measure.prototype.componentDidUpdate = function () {\n        var syncLayout = this.props.syncLayout;\n        if (!isSharedLayout(syncLayout))\n            syncLayout.flush();\n    };\n    Measure.prototype.render = function () {\n        return null;\n    };\n    return Measure;\n}(React__default.Component));\nfunction MeasureContextProvider(props) {\n    var syncLayout = useContext(SharedLayoutContext);\n    var framerSyncLayout = useContext(FramerTreeLayoutContext);\n    return (React__default.createElement(Measure, __assign({}, props, { syncLayout: syncLayout, framerSyncLayout: framerSyncLayout })));\n}\n\nexport { MeasureContextProvider };\n","import { AnimateLayoutContextProvider } from './Animate.js';\nimport { MeasureContextProvider } from './Measure.js';\n\nvar layoutAnimations = {\n    measureLayout: MeasureContextProvider,\n    layoutAnimation: AnimateLayoutContextProvider,\n};\n\nexport { layoutAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    var prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (var i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { __spreadArray, __read, __assign, __rest } from 'tslib';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.js';\nimport { shallowCompare } from '../../utils/shallow-compare.js';\nimport { animateVisualElement } from './animation.js';\nimport { AnimationType } from './types.js';\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.js';\n\nvar variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Focus,\n    AnimationType.Exit,\n];\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return function (animations) {\n        return Promise.all(animations.map(function (_a) {\n            var animation = _a.animation, options = _a.options;\n            return animateVisualElement(visualElement, animation, options);\n        }));\n    };\n}\nfunction createAnimationState(visualElement) {\n    var animate = animateList(visualElement);\n    var state = createState();\n    var allAnimatedKeys = {};\n    var isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    var buildResolvedTypeValues = function (acc, definition) {\n        var resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            resolved.transition; var transitionEnd = resolved.transitionEnd, target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\n            acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\n        }\n        return acc;\n    };\n    function isAnimated(key) {\n        return allAnimatedKeys[key] !== undefined;\n    }\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        var _a;\n        var props = visualElement.getProps();\n        var context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        var animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        var removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        var encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        var removedVariantIndex = Infinity;\n        var _loop_1 = function (i) {\n            var type = reversePriorityOrder[i];\n            var typeState = state[type];\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            var propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            var activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = __assign({}, encounteredKeys);\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                return \"continue\";\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            var definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\n            var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\n            var markToAnimate = function (key) {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (var key in allKeys) {\n                var next = resolvedValues[key];\n                var prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev)) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) { return ({\n                    animation: animation,\n                    options: __assign({ type: type }, options),\n                }); }))));\n            }\n        };\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (var i = 0; i < numAnimationTypes; i++) {\n            _loop_1(i);\n        }\n        allAnimatedKeys = __assign({}, encounteredKeys);\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            var fallbackAnimation_1 = {};\n            removedKeys.forEach(function (key) {\n                var fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation_1[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation_1 });\n        }\n        var shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        return animateChanges(options, type);\n    }\n    return {\n        isAnimated: isAnimated,\n        animateChanges: animateChanges,\n        setActive: setActive,\n        setAnimateFunction: setAnimateFunction,\n        getState: function () { return state; },\n    };\n}\nfunction variantsHaveChanged(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (isVariantLabels(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive) {\n    if (isActive === void 0) { isActive = false; }\n    return {\n        isActive: isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    var _a;\n    return _a = {},\n        _a[AnimationType.Animate] = createTypeState(true),\n        _a[AnimationType.Hover] = createTypeState(),\n        _a[AnimationType.Tap] = createTypeState(),\n        _a[AnimationType.Drag] = createTypeState(),\n        _a[AnimationType.Focus] = createTypeState(),\n        _a[AnimationType.Exit] = createTypeState(),\n        _a;\n}\n\nexport { createAnimationState, variantPriorityOrder, variantsHaveChanged };\n","import { __read } from 'tslib';\nimport { useEffect, useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { usePresence } from '../../components/AnimatePresence/use-presence.js';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { createAnimationState } from '../../render/utils/animation-state.js';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar animations = {\n    animation: makeRenderlessComponent(function (_a) {\n        var visualElement = _a.visualElement, animate = _a.animate;\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */\n        visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */\n        if (isAnimationControls(animate)) {\n            useEffect(function () { return animate.subscribe(visualElement); }, [animate]);\n        }\n    }),\n    exit: makeRenderlessComponent(function (props) {\n        var custom = props.custom, visualElement = props.visualElement;\n        var _a = __read(usePresence(), 2), isPresent = _a[0], onExitComplete = _a[1];\n        var presenceContext = useContext(PresenceContext);\n        useEffect(function () {\n            var _a, _b;\n            var animation = (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Exit, !isPresent, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom });\n            !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));\n        }, [isPresent]);\n    }),\n};\n\nexport { animations };\n","import { isMouseEvent } from './utils/event-type.js';\nimport { AnimationType } from '../render/utils/types.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\nfunction createHoverEvent(visualElement, isActive, callback) {\n    return function (event, info) {\n        var _a;\n        if (!isMouseEvent(event) || isDragActive())\n            return;\n        callback === null || callback === void 0 ? void 0 : callback(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);\n    };\n}\nfunction useHoverGesture(_a) {\n    var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement = _a.visualElement;\n    usePointerEvent(visualElement, \"pointerenter\", onHoverStart || whileHover\n        ? createHoverEvent(visualElement, true, onHoverStart)\n        : undefined);\n    usePointerEvent(visualElement, \"pointerleave\", onHoverEnd || whileHover\n        ? createHoverEvent(visualElement, false, onHoverEnd)\n        : undefined);\n}\n\nexport { useHoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nvar isNodeOrChild = function (parent, child) {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { useFocusGesture } from '../../gestures/use-focus-gesture.js';\nimport { useHoverGesture } from '../../gestures/use-hover-gesture.js';\nimport { useTapGesture } from '../../gestures/use-tap-gesture.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar gestureAnimations = {\n    tap: makeRenderlessComponent(useTapGesture),\n    focus: makeRenderlessComponent(useFocusGesture),\n    hover: makeRenderlessComponent(useHoverGesture),\n};\n\nexport { gestureAnimations };\n","import { useRef } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.js';\nimport { usePointerEvent, addPointerEvent } from '../events/use-pointer-event.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\nimport { pipe } from 'popmotion';\nimport { AnimationType } from '../render/utils/types.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture(_a) {\n    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement = _a.visualElement;\n    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    var isPressing = useRef(false);\n    var cancelPointerEndListeners = useRef(null);\n    function removePointerEndListener() {\n        var _a;\n        (_a = cancelPointerEndListeners.current) === null || _a === void 0 ? void 0 : _a.call(cancelPointerEndListeners);\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        var _a;\n        removePointerEndListener();\n        isPressing.current = false;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, false);\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        if (!checkPointerEnd())\n            return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n        !isNodeOrChild(visualElement.getInstance(), event.target)\n            ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info)\n            : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);\n    }\n    function onPointerCancel(event, info) {\n        if (!checkPointerEnd())\n            return;\n        onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);\n    }\n    function onPointerDown(event, info) {\n        var _a;\n        removePointerEndListener();\n        if (isPressing.current)\n            return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp), addPointerEvent(window, \"pointercancel\", onPointerCancel));\n        onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, true);\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined);\n    useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };\n","import { AnimationType } from '../render/utils/types.js';\nimport { useDomEvent } from '../events/use-dom-event.js';\n\n/**\n *\n * @param props\n * @param ref\n * @internal\n */\nfunction useFocusGesture(_a) {\n    var whileFocus = _a.whileFocus, visualElement = _a.visualElement;\n    var onFocus = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, true);\n    };\n    var onBlur = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, false);\n    };\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };\n","import { axisBox, delta } from '../../utils/geometry/index.js';\n\nvar createProjectionState = function () { return ({\n    isEnabled: false,\n    isHydrated: false,\n    isTargetLocked: false,\n    target: axisBox(),\n    targetFinal: axisBox(),\n}); };\nfunction createLayoutState() {\n    return {\n        isHydrated: false,\n        layout: axisBox(),\n        layoutCorrected: axisBox(),\n        treeScale: { x: 1, y: 1 },\n        delta: delta(),\n        deltaFinal: delta(),\n        deltaTransform: \"\",\n    };\n}\nvar zeroLayout = createLayoutState();\n\nexport { createLayoutState, createProjectionState, zeroLayout };\n","import { zeroLayout } from '../../utils/state.js';\n\n/**\n * Build a transform style that takes a calculated delta between the element's current\n * space on screen and projects it into the desired space.\n */\nfunction buildLayoutProjectionTransform(_a, treeScale, latestTransform) {\n    var x = _a.x, y = _a.y;\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = x.translate / treeScale.x;\n    var yTranslate = y.translate / treeScale.y;\n    var transform = \"translate3d(\" + xTranslate + \"px, \" + yTranslate + \"px, 0) \";\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate)\n            transform += \"rotate(\" + rotate + \") \";\n        if (rotateX)\n            transform += \"rotateX(\" + rotateX + \") \";\n        if (rotateY)\n            transform += \"rotateY(\" + rotateY + \") \";\n    }\n    transform += \"scale(\" + x.scale + \", \" + y.scale + \")\";\n    return !latestTransform && transform === identityProjection ? \"\" : transform;\n}\n/**\n * Take the calculated delta origin and apply it as a transform string.\n */\nfunction buildLayoutProjectionTransformOrigin(_a) {\n    var deltaFinal = _a.deltaFinal;\n    return deltaFinal.x.origin * 100 + \"% \" + deltaFinal.y.origin * 100 + \"% 0\";\n}\nvar identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });\n\nexport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, identityProjection };\n","import { __spreadArray, __read } from 'tslib';\nimport { SubscriptionManager } from '../../utils/subscription-manager.js';\n\nvar names = [\n    \"LayoutMeasure\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutUpdate\",\n    \"ViewportBoxUpdate\",\n    \"Update\",\n    \"Render\",\n    \"AnimationComplete\",\n    \"LayoutAnimationComplete\",\n    \"AnimationStart\",\n    \"SetAxisTarget\",\n    \"Unmount\",\n];\nfunction createLifecycles() {\n    var managers = names.map(function () { return new SubscriptionManager(); });\n    var propSubscriptions = {};\n    var lifecycles = {\n        clearAllListeners: function () { return managers.forEach(function (manager) { return manager.clear(); }); },\n        updatePropListeners: function (props) {\n            return names.forEach(function (name) {\n                var _a;\n                (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);\n                var on = \"on\" + name;\n                var propListener = props[on];\n                if (propListener) {\n                    propSubscriptions[name] = lifecycles[on](propListener);\n                }\n            });\n        },\n    };\n    managers.forEach(function (manager, i) {\n        lifecycles[\"on\" + names[i]] = function (handler) { return manager.add(handler); };\n        lifecycles[\"notify\" + names[i]] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.notify.apply(manager, __spreadArray([], __read(args)));\n        };\n    });\n    return lifecycles;\n}\n\nexport { createLifecycles };\n","import { resetBox, applyTreeDeltas } from '../../utils/geometry/delta-apply.js';\nimport { updateBoxDelta } from '../../utils/geometry/delta-calc.js';\n\nfunction updateLayoutDeltas(_a, _b, treePath, transformOrigin) {\n    var delta = _a.delta, layout = _a.layout, layoutCorrected = _a.layoutCorrected, treeScale = _a.treeScale;\n    var target = _b.target;\n    /**\n     * Reset the corrected box with the latest values from box, as we're then going\n     * to perform mutative operations on it.\n     */\n    resetBox(layoutCorrected, layout);\n    /**\n     * Apply all the parent deltas to this box to produce the corrected box. This\n     * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n     */\n    applyTreeDeltas(layoutCorrected, treeScale, treePath);\n    /**\n     * Update the delta between the corrected box and the target box before user-set transforms were applied.\n     * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n     * for our layout reprojection, but still allow them to be scaled correctly by the user.\n     * It might be that to simplify this we may want to accept that user-set scale is also corrected\n     * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n     * to allow people to choose whether these styles are corrected based on just the\n     * layout reprojection or the final bounding box.\n     */\n    updateBoxDelta(delta, layoutCorrected, target, transformOrigin);\n}\n\nexport { updateLayoutDeltas };\n","import { addUniqueItem, removeItem } from '../../utils/array.js';\nimport { compareByDepth } from './compare-by-depth.js';\n\nvar FlatTree = /** @class */ (function () {\n    function FlatTree() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    FlatTree.prototype.add = function (child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.remove = function (child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.forEach = function (callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    };\n    return FlatTree;\n}());\n\nexport { FlatTree };\n","import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { axisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { calcRelativeBox, updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-projection-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { FlatTree } from './utils/flat-tree.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\nimport { setCurrentViewportBox } from './dom/projection/relative-set.js';\nimport { isDraggable } from './utils/is-draggable.js';\n\nvar visualElement = function (_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function (_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState;\n        if (options === void 0) { options = {}; }\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */\n        var instance;\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender and onViewportBoxUpdate.\n         */\n        var lifecycles = createLifecycles();\n        /**\n         *\n         */\n        var projection = createProjectionState();\n        /**\n         * A reference to the nearest projecting parent. This is either\n         * undefined if we haven't looked for the nearest projecting parent,\n         * false if there is no parent performing layout projection, or a reference\n         * to the projecting parent.\n         */\n        var projectionParent;\n        /**\n         * This is a reference to the visual state of the \"lead\" visual element.\n         * Usually, this will be this visual element. But if it shares a layoutId\n         * with other visual elements, only one of them will be designated lead by\n         * AnimateSharedLayout. All the other visual elements will take on the visual\n         * appearance of the lead while they crossfade to it.\n         */\n        var leadProjection = projection;\n        var leadLatestValues = latestValues;\n        var unsubscribeFromLeadVisualElement;\n        /**\n         * The latest layout measurements and calculated projections. This\n         * is seperate from the target projection data in visualState as\n         * many visual elements might point to the same piece of visualState as\n         * a target, whereas they might each have different layouts and thus\n         * projection calculations needed to project into the same viewport box.\n         */\n        var layoutState = createLayoutState();\n        /**\n         *\n         */\n        var crossfader;\n        /**\n         * Keep track of whether the viewport box has been updated since the\n         * last time the layout projection was re-calculated.\n         */\n        var hasViewportBoxUpdated = false;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        var prevMotionValues = {};\n        /**\n         * x/y motion values that track the progress of initiated layout\n         * animations.\n         *\n         * TODO: Target for removal\n         */\n        var projectionTargetProgress;\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */\n        var baseTarget = __assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */\n        var removeFromVariantTree;\n        /**\n         *\n         */\n        function render() {\n            if (!instance)\n                return;\n            if (element.isProjectionReady()) {\n                /**\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n                 * This is the final box that we will then project into by calculating a transform delta and\n                 * applying it to the corrected box.\n                 */\n                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n                /**\n                 * Update the delta between the corrected box and the final target box, after\n                 * user-set transforms are applied to it. This will be used by the renderer to\n                 * create a transform style that will reproject the element from its actual layout\n                 * into the desired bounding box.\n                 */\n                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n            }\n            triggerBuild();\n            renderInstance(instance, renderState);\n        }\n        function triggerBuild() {\n            var valuesToRender = latestValues;\n            if (crossfader && crossfader.isActive()) {\n                var crossfadedValues = crossfader.getCrossfadeState(element);\n                if (crossfadedValues)\n                    valuesToRender = crossfadedValues;\n            }\n            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        function updateLayoutProjection() {\n            if (!element.isProjectionReady())\n                return;\n            var delta = layoutState.delta, treeScale = layoutState.treeScale;\n            var prevTreeScaleX = treeScale.x;\n            var prevTreeScaleY = treeScale.y;\n            var prevDeltaTransform = layoutState.deltaTransform;\n            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n            hasViewportBoxUpdated &&\n                element.notifyViewportBoxUpdate(leadProjection.target, delta);\n            hasViewportBoxUpdated = false;\n            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n            if (deltaTransform !== prevDeltaTransform ||\n                // Also compare calculated treeScale, for values that rely on this only for scale correction\n                prevTreeScaleX !== treeScale.x ||\n                prevTreeScaleY !== treeScale.y) {\n                element.scheduleRender();\n            }\n            layoutState.deltaTransform = deltaTransform;\n        }\n        function updateTreeLayoutProjection() {\n            element.layoutTree.forEach(fireUpdateLayoutProjection);\n        }\n        /**\n         *\n         */\n        function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function (latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync.update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function () {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for (var key in initialMotionValues) {\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        var isControllingVariants = checkIfControllingVariants(props);\n        var isVariantNode = checkIfVariantNode(props);\n        var element = __assign(__assign({ treeType: treeType, \n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */\n            current: null, \n            /**\n             * The depth of this visual element within the visual element tree.\n             */\n            depth: parent ? parent.depth + 1 : 0, parent: parent, children: new Set(), \n            /**\n             * An ancestor path back to the root visual element. This is used\n             * by layout projection to quickly recurse back up the tree.\n             */\n            path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [], layoutTree: parent ? parent.layoutTree : new FlatTree(), \n            /**\n             *\n             */\n            presenceId: presenceId,\n            projection: projection, \n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */\n            variantChildren: isVariantNode ? new Set() : undefined, \n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */\n            isVisible: undefined, \n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */\n            blockInitialAnimation: blockInitialAnimation, \n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */\n            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {\n                instance = element.current = newInstance;\n                element.pointTo(element);\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n                parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            },\n            /**\n             *\n             */\n            unmount: function () {\n                cancelSync.update(update);\n                cancelSync.render(render);\n                cancelSync.preRender(element.updateLayoutProjection);\n                valueSubscriptions.forEach(function (remove) { return remove(); });\n                element.stopLayoutAnimation();\n                element.layoutTree.remove(element);\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                lifecycles.clearAllListeners();\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */\n            addVariantChild: function (child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function () { return closestVariantNode.variantChildren.delete(child); };\n                }\n            },\n            sortNodePosition: function (other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */\n                if (!sortNodePosition || treeType !== other.treeType)\n                    return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            }, \n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */\n            getClosestVariantNode: function () {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            }, \n            /**\n             * A method that schedules an update to layout projections throughout\n             * the tree. We inherit from the parent so there's only ever one\n             * job scheduled on the next frame - that of the root visual element.\n             */\n            scheduleUpdateLayoutProjection: parent\n                ? parent.scheduleUpdateLayoutProjection\n                : function () {\n                    return sync.preRender(element.updateTreeLayoutProjection, false, true);\n                }, \n            /**\n             * Expose the latest layoutId prop.\n             */\n            getLayoutId: function () { return props.layoutId; }, \n            /**\n             * Returns the current instance.\n             */\n            getInstance: function () { return instance; }, \n            /**\n             * Get/set the latest static values.\n             */\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */\n            getLatestValues: function () { return latestValues; }, \n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */\n            setVisibility: function (visibility) {\n                if (element.isVisible === visibility)\n                    return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */\n            makeTargetAnimatable: function (target, canMutate) {\n                if (canMutate === void 0) { canMutate = true; }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */\n            addValue: function (key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key))\n                    element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */\n            removeValue: function (key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            }, \n            /**\n             * Check whether we have a motion value for this key\n             */\n            hasValue: function (key) { return values.has(key); }, \n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */\n            getValue: function (key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            }, \n            /**\n             * Iterate over our motion values.\n             */\n            forEachValue: function (callback) { return values.forEach(callback); }, \n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */\n            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, \n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */\n            setBaseTarget: function (key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */\n            getBaseTarget: function (key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target))\n                        return target;\n                }\n                return baseTarget[key];\n            } }, lifecycles), { \n            /**\n             * Build the renderer state based on the latest visual state.\n             */\n            build: function () {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */\n            scheduleRender: function () {\n                sync.render(render, false, true);\n            }, \n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */\n            syncRender: render, \n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */\n            setProps: function (newProps) {\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            }, getProps: function () { return props; }, \n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n            /**\n             * Returns the defined default transition on this component.\n             */\n            getDefaultTransition: function () { return props.transition; }, \n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */\n            getVariantContext: function (startAtParent) {\n                if (startAtParent === void 0) { startAtParent = false; }\n                if (startAtParent)\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for (var i = 0; i < numVariantProps; i++) {\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            },\n            // Layout projection ==============================\n            /**\n             * Enable layout projection for this visual element. Won't actually\n             * occur until we also have hydrated layout measurements.\n             */\n            enableLayoutProjection: function () {\n                projection.isEnabled = true;\n                element.layoutTree.add(element);\n            },\n            /**\n             * Lock the projection target, for instance when dragging, so\n             * nothing else can try and animate it.\n             */\n            lockProjectionTarget: function () {\n                projection.isTargetLocked = true;\n            },\n            unlockProjectionTarget: function () {\n                element.stopLayoutAnimation();\n                projection.isTargetLocked = false;\n            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {\n                crossfader = newCrossfader;\n            }, isProjectionReady: function () {\n                return projection.isEnabled &&\n                    projection.isHydrated &&\n                    layoutState.isHydrated;\n            }, \n            /**\n             * Start a layout animation on a given axis.\n             */\n            startLayoutAnimation: function (axis, transition, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var progress = element.getProjectionAnimationProgress()[axis];\n                var _a = isRelative\n                    ? projection.relativeTarget[axis]\n                    : projection.target[axis], min = _a.min, max = _a.max;\n                var length = max - min;\n                progress.clearListeners();\n                progress.set(min);\n                progress.set(min); // Set twice to hard-reset velocity\n                progress.onChange(function (v) {\n                    element.setProjectionTargetAxis(axis, v, v + length, isRelative);\n                });\n                return element.animateMotionValue(axis, progress, 0, transition);\n            },\n            /**\n             * Stop layout animations.\n             */\n            stopLayoutAnimation: function () {\n                eachAxis(function (axis) {\n                    return element.getProjectionAnimationProgress()[axis].stop();\n                });\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */\n            measureViewportBox: function (withTransform) {\n                if (withTransform === void 0) { withTransform = true; }\n                var viewportBox = measureViewportBox(instance, options);\n                if (!withTransform)\n                    removeBoxTransforms(viewportBox, latestValues);\n                return viewportBox;\n            },\n            /**\n             * Get the motion values tracking the layout animations on each\n             * axis. Lazy init if not already created.\n             */\n            getProjectionAnimationProgress: function () {\n                projectionTargetProgress || (projectionTargetProgress = {\n                    x: motionValue(0),\n                    y: motionValue(0),\n                });\n                return projectionTargetProgress;\n            },\n            /**\n             * Update the projection of a single axis. Schedule an update to\n             * the tree layout projection.\n             */\n            setProjectionTargetAxis: function (axis, min, max, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var target;\n                if (isRelative) {\n                    if (!projection.relativeTarget) {\n                        projection.relativeTarget = axisBox();\n                    }\n                    target = projection.relativeTarget[axis];\n                }\n                else {\n                    projection.relativeTarget = undefined;\n                    target = projection.target[axis];\n                }\n                projection.isHydrated = true;\n                target.min = min;\n                target.max = max;\n                // Flag that we want to fire the onViewportBoxUpdate event handler\n                hasViewportBoxUpdated = true;\n                lifecycles.notifySetAxisTarget();\n            },\n            /**\n             * Rebase the projection target on top of the provided viewport box\n             * or the measured layout. This ensures that non-animating elements\n             * don't fall out of sync differences in measurements vs projections\n             * after a page scroll or other relayout.\n             */\n            rebaseProjectionTarget: function (force, box) {\n                if (box === void 0) { box = layoutState.layout; }\n                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;\n                var shouldRebase = !projection.relativeTarget &&\n                    !projection.isTargetLocked &&\n                    !x.isAnimating() &&\n                    !y.isAnimating();\n                if (force || shouldRebase) {\n                    eachAxis(function (axis) {\n                        var _a = box[axis], min = _a.min, max = _a.max;\n                        element.setProjectionTargetAxis(axis, min, max);\n                    });\n                }\n            },\n            /**\n             * Notify the visual element that its layout is up-to-date.\n             * Currently Animate.tsx uses this to check whether a layout animation\n             * needs to be performed.\n             */\n            notifyLayoutReady: function (config) {\n                setCurrentViewportBox(element);\n                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n            }, \n            /**\n             * Temporarily reset the transform of the instance.\n             */\n            resetTransform: function () { return resetTransform(element, instance, props); }, restoreTransform: function () { return restoreTransform(instance, renderState); }, updateLayoutProjection: updateLayoutProjection,\n            updateTreeLayoutProjection: function () {\n                element.layoutTree.forEach(fireResolveRelativeTargetBox);\n                /**\n                 * Schedule the projection updates at the end of the current preRender\n                 * step. This will ensure that all layout trees will first resolve\n                 * relative projection boxes into viewport boxes, and *then*\n                 * update projections.\n                 */\n                sync.preRender(updateTreeLayoutProjection, false, true);\n                // sync.postRender(() => element.scheduleUpdateLayoutProjection())\n            },\n            getProjectionParent: function () {\n                if (projectionParent === undefined) {\n                    var foundParent = false;\n                    // Search backwards through the tree path\n                    for (var i = element.path.length - 1; i >= 0; i--) {\n                        var ancestor = element.path[i];\n                        if (ancestor.projection.isEnabled) {\n                            foundParent = ancestor;\n                            break;\n                        }\n                    }\n                    projectionParent = foundParent;\n                }\n                return projectionParent;\n            },\n            resolveRelativeTargetBox: function () {\n                var relativeParent = element.getProjectionParent();\n                if (!projection.relativeTarget || !relativeParent)\n                    return;\n                calcRelativeBox(projection, relativeParent.projection);\n                if (isDraggable(relativeParent)) {\n                    var target = projection.target;\n                    applyBoxTransforms(target, target, relativeParent.getLatestValues());\n                }\n            },\n            shouldResetTransform: function () {\n                return Boolean(props._layoutResetTransform);\n            },\n            /**\n             *\n             */\n            pointTo: function (newLead) {\n                leadProjection = newLead.projection;\n                leadLatestValues = newLead.getLatestValues();\n                /**\n                 * Subscribe to lead component's layout animations\n                 */\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n                    var _a;\n                    if (element.isPresent) {\n                        element.presence = Presence.Present;\n                    }\n                    else {\n                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n                    }\n                }));\n            }, \n            // TODO: Clean this up\n            isPresent: true, presence: Presence.Entering });\n        return element;\n    };\n};\nfunction fireResolveRelativeTargetBox(child) {\n    child.resolveRelativeTargetBox();\n}\nfunction fireUpdateLayoutProjection(child) {\n    child.updateLayoutProjection();\n}\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\n\nexport { visualElement };\n","import { motionValue } from '../../value/index.js';\nimport { isMotionValue } from '../../value/utils/is-motion-value.js';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    var _a;\n    for (var key in next) {\n        var nextValue = next[key];\n        var prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */\n            element.addValue(key, motionValue(nextValue));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                var existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (var key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { calcRelativeOffset } from '../../../motion/features/layout/utils.js';\nimport { eachAxis } from '../../../utils/each-axis.js';\n\nfunction setCurrentViewportBox(visualElement) {\n    var projectionParent = visualElement.getProjectionParent();\n    if (!projectionParent) {\n        visualElement.rebaseProjectionTarget();\n        return;\n    }\n    var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);\n    eachAxis(function (axis) {\n        visualElement.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);\n    });\n}\n\nexport { setCurrentViewportBox };\n","import { __assign, __read } from 'tslib';\nimport { number, px } from 'style-value-types';\nimport { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.js';\nimport { invariant } from 'hey-listen';\nimport { transformProps } from '../../html/utils/transform.js';\nimport { findDimensionValueType } from '../value-types/dimensions.js';\n\nvar positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nvar isPositionalKey = function (key) { return positionalKeys.has(key); };\nvar hasPositionalKey = function (target) {\n    return Object.keys(target).some(isPositionalKey);\n};\nvar setAndResetVelocity = function (value, to) {\n    // Looks odd but setting it twice doesn't render, it'll just\n    // set both prev and current to the latest value\n    value.set(to, false);\n    value.set(to);\n};\nvar isNumOrPxType = function (v) {\n    return v === number || v === px;\n};\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nvar getPosFromMatrix = function (matrix, pos) {\n    return parseFloat(matrix.split(\", \")[pos]);\n};\nvar getTranslateFromMatrix = function (pos2, pos3) { return function (_bbox, _a) {\n    var transform = _a.transform;\n    if (transform === \"none\" || !transform)\n        return 0;\n    var matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        var matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n}; };\nvar transformKeys = new Set([\"x\", \"y\", \"z\"]);\nvar nonTranslationalTransformKeys = transformProps.filter(function (key) { return !transformKeys.has(key); });\nfunction removeNonTranslationalTransform(visualElement) {\n    var removedTransforms = [];\n    nonTranslationalTransformKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.syncRender();\n    return removedTransforms;\n}\nvar positionalValues = {\n    // Dimensions\n    width: function (_a) {\n        var x = _a.x;\n        return x.max - x.min;\n    },\n    height: function (_a) {\n        var y = _a.y;\n        return y.max - y.min;\n    },\n    top: function (_bbox, _a) {\n        var top = _a.top;\n        return parseFloat(top);\n    },\n    left: function (_bbox, _a) {\n        var left = _a.left;\n        return parseFloat(left);\n    },\n    bottom: function (_a, _b) {\n        var y = _a.y;\n        var top = _b.top;\n        return parseFloat(top) + (y.max - y.min);\n    },\n    right: function (_a, _b) {\n        var x = _a.x;\n        var left = _b.left;\n        return parseFloat(left) + (x.max - x.min);\n    },\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nvar convertChangedValueTypes = function (target, visualElement, changedKeys) {\n    var originBbox = visualElement.measureViewportBox();\n    var element = visualElement.getInstance();\n    var elementComputedStyle = getComputedStyle(element);\n    var display = elementComputedStyle.display, top = elementComputedStyle.top, left = elementComputedStyle.left, bottom = elementComputedStyle.bottom, right = elementComputedStyle.right, transform = elementComputedStyle.transform;\n    var originComputedStyle = { top: top, left: left, bottom: bottom, right: right, transform: transform };\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.syncRender();\n    var targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach(function (key) {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        var value = visualElement.getValue(key);\n        setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nvar checkAndConvertChangedValueTypes = function (visualElement, target, origin, transitionEnd) {\n    if (origin === void 0) { origin = {}; }\n    if (transitionEnd === void 0) { transitionEnd = {}; }\n    target = __assign({}, target);\n    transitionEnd = __assign({}, transitionEnd);\n    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    var removedTransformValues = [];\n    var hasAttemptedToRemoveTransformValues = false;\n    var changedValueTypeKeys = [];\n    targetPositionalKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        var from = origin[key];\n        var to = target[key];\n        var fromType = findDimensionValueType(from);\n        var toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            var numKeyframes = to.length;\n            for (var i = to[0] === null ? 1 : 0; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                var current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues = removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                setAndResetVelocity(value, to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        var convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(function (_a) {\n                var _b = __read(_a, 2), key = _b[0], value = _b[1];\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.syncRender();\n        return { target: convertedTarget, transitionEnd: transitionEnd };\n    }\n    else {\n        return { target: target, transitionEnd: transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target: target, transitionEnd: transitionEnd };\n}\n\nexport { BoundingBoxDimension, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.js';\nimport { unitConversion } from './unit-conversion.js';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nvar parseDomVariant = function (visualElement, target, origin, transitionEnd) {\n    var resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","import { __rest, __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.js';\nimport { getBoundingBox } from '../dom/projection/measure.js';\nimport { buildHTMLStyles } from './utils/build-styles.js';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.js';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.js';\nimport { isTransformProp } from './utils/transform.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { renderHTML } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from './utils/build-projection-transform.js';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance: function (domElement, key) {\n        if (isTransformProp(key)) {\n            var defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            var computedStyle = getComputedStyle(domElement);\n            return ((isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0);\n        }\n    },\n    sortNodePosition: function (a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget: function (props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox: function (element, _a) {\n        var transformPagePoint = _a.transformPagePoint;\n        return getBoundingBox(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */\n    resetTransform: function (element, domElement, props) {\n        var transformTemplate = props.transformTemplate;\n        domElement.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform: function (instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState: function (key, _a) {\n        var vars = _a.vars, style = _a.style;\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */\n    makeTargetAnimatable: function (element, _a, _b, isMounted) {\n        var transformValues = _b.transformValues;\n        if (isMounted === void 0) { isMounted = true; }\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n        var origin = getOrigin(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(element, target, origin);\n            var parsed = parseDomVariant(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return __assign({ transition: transition,\n            transitionEnd: transitionEnd }, target);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (element, renderState, latestValues, projection, layoutState, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible\n                ? \"visible\"\n                : \"hidden\";\n        }\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    },\n    render: renderHTML,\n};\nvar htmlVisualElement = visualElement(htmlConfig);\n\nexport { getComputedStyle, htmlConfig, htmlVisualElement };\n","import { __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { htmlConfig } from '../html/visual-element.js';\nimport { buildSVGAttrs } from './utils/build-attrs.js';\nimport { camelToDash } from '../dom/utils/camel-to-dash.js';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.js';\nimport { isTransformProp } from '../html/utils/transform.js';\nimport { renderSVG } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from '../html/utils/build-projection-transform.js';\n\nvar svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function (props, key) {\n        return props[key];\n    },\n    readValueFromInstance: function (domElement, key) {\n        var _a;\n        if (isTransformProp(key)) {\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return domElement.getAttribute(key);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (_element, renderState, latestValues, projection, layoutState, options, props) {\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    }, render: renderSVG }));\n\nexport { svgVisualElement };\n","import { __assign } from 'tslib';\nimport { animations } from '../../motion/features/animations.js';\nimport { gestureAnimations } from '../../motion/features/gestures.js';\nimport { createDomVisualElement } from './create-visual-element.js';\n\n/**\n * @public\n */\nvar domAnimation = __assign(__assign({ renderer: createDomVisualElement }, animations), gestureAnimations);\n\nexport { domAnimation };\n","import { htmlVisualElement } from '../html/visual-element.js';\nimport { svgVisualElement } from '../svg/visual-element.js';\nimport { isSVGComponent } from './utils/is-svg-component.js';\n\nvar createDomVisualElement = function (Component, options) {\n    return isSVGComponent(Component)\n        ? svgVisualElement(options, { enableHardwareAcceleration: false })\n        : htmlVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { __assign } from 'tslib';\nimport { drag } from '../../motion/features/drag.js';\nimport { layoutAnimations } from '../../motion/features/layout/index.js';\nimport { domAnimation } from './features-animation.js';\n\n/**\n * @public\n */\nvar domMax = __assign(__assign(__assign({}, domAnimation), drag), layoutAnimations);\n\nexport { domMax };\n"],"sourceRoot":""}