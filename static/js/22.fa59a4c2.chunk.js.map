{"version":3,"sources":["components/Breadcrumbs.js","components/HeaderBreadcrumbs.js","pages/list/Lists.js"],"names":["Breadcrumbs","links","activeLast","other","currentLink","length","name","listDefault","map","link","LinkItem","listActiveLast","Typography","variant","sx","maxWidth","overflow","whiteSpace","color","textOverflow","separator","Box","component","width","height","borderRadius","bgcolor","href","icon","Link","RouterLink","to","lineHeight","display","alignItems","mr","HeaderBreadcrumbs","action","heading","moreLink","mb","flexGrow","gutterBottom","flexShrink","mt","isString","target","rel","noWrap","Lists","themeStretch","useSettings","isMountedRef","useIsMountedRef","enqueueSnackbar","useSnackbar","useAuth","user","isAuthenticated","useState","lists","setLists","page","setPage","total","setTotal","isMyLists","setIsMyLists","getLists","useCallback","a","params","populate","id","axios","get","data","current","results","totalPages","console","error","useEffect","title","PATH_WIBU","label","root","list","spacing","value","exclusive","onChange","event","fullWidth","p","one","_id","titles","displayName","justifyContent","my","count"],"mappings":"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","file":"static/js/22.fa59a4c2.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { Box, Link, Typography, Breadcrumbs as MUIBreadcrumbs } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nBreadcrumbs.propTypes = {\n  activeLast: PropTypes.bool,\n  links: PropTypes.array.isRequired,\n};\n\nexport default function Breadcrumbs({ links, activeLast = false, ...other }) {\n  const currentLink = links[links.length - 1].name;\n\n  const listDefault = links.map((link) => <LinkItem key={link.name} link={link} />);\n\n  const listActiveLast = links.map((link) => (\n    <div key={link.name}>\n      {link.name !== currentLink ? (\n        <LinkItem link={link} />\n      ) : (\n        <Typography\n          variant=\"body2\"\n          sx={{\n            maxWidth: 260,\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            color: 'text.disabled',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          {currentLink}\n        </Typography>\n      )}\n    </div>\n  ));\n\n  return (\n    <MUIBreadcrumbs\n      separator={<Box component=\"span\" sx={{ width: 4, height: 4, borderRadius: '50%', bgcolor: 'text.disabled' }} />}\n      {...other}\n    >\n      {activeLast ? listDefault : listActiveLast}\n    </MUIBreadcrumbs>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nLinkItem.propTypes = {\n  link: PropTypes.shape({\n    href: PropTypes.string,\n    icon: PropTypes.any,\n    name: PropTypes.string,\n  }),\n};\n\nfunction LinkItem({ link }) {\n  const { href, name, icon } = link;\n  return (\n    <Link\n      key={name}\n      variant=\"body2\"\n      component={RouterLink}\n      to={href || '#'}\n      sx={{\n        lineHeight: 2,\n        display: 'flex',\n        alignItems: 'center',\n        color: 'text.primary',\n        '& > div': { display: 'inherit' },\n      }}\n    >\n      {icon && <Box sx={{ mr: 1, '& svg': { width: 20, height: 20 } }}>{icon}</Box>}\n      {name}\n    </Link>\n  );\n}\n","import isString from 'lodash/isString';\nimport PropTypes from 'prop-types';\n// @mui\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport Breadcrumbs from './Breadcrumbs';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <Breadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" rel=\"noopener\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link\n              noWrap\n              key={href}\n              href={href}\n              variant=\"body2\"\n              target=\"_blank\"\n              rel=\"noopener\"\n              sx={{ display: 'table' }}\n            >\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import { useState, useCallback, useEffect } from 'react';\r\nimport { Link as RouterLink, useSearchParams } from 'react-router-dom';\r\n// @mui\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { Container, Pagination, Box, Chip, Stack, Paper, Typography, Link, ToggleButton, ToggleButtonGroup } from '@mui/material';\r\n// hooks\r\nimport { useSnackbar } from 'notistack';\r\nimport useSettings from '../../hooks/useSettings';\r\nimport useIsMountedRef from '../../hooks/useIsMountedRef';\r\nimport useAuth from '../../hooks/useAuth';\r\n\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport Iconify from '../../components/Iconify';\r\n// utils\r\nimport axios from '../../utils/axios';\r\n// paths\r\nimport { PATH_WIBU } from '../../routes/paths';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Lists() {\r\n    const { themeStretch } = useSettings();\r\n    const isMountedRef = useIsMountedRef();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const { user, isAuthenticated } = useAuth();\r\n\r\n    const [lists, setLists] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [total, setTotal] = useState(1);\r\n    const [isMyLists, setIsMyLists] = useState(false);\r\n\r\n    const getLists = useCallback(async () => {\r\n        try {\r\n            const params = { populate: 'user', page };\r\n            if (isMyLists) params.user = user.id;\r\n            const { data } = await axios.get('/v1/lists', {\r\n                params\r\n            });\r\n            if (isMountedRef.current) {\r\n                setLists(data.results);\r\n                setTotal(data.totalPages);\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n            enqueueSnackbar(err, { variant: 'error' });\r\n        }\r\n    }, [isMountedRef, page, isMyLists]);\r\n\r\n    const handlePageChange = (event, page) => {\r\n        setPage(page);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getLists();\r\n        return () => { setLists([]); }\r\n    }, [getLists]);\r\n\r\n    const handleChange = (event, value) => {\r\n        if (!value) return setIsMyLists(false);\r\n        return setIsMyLists(true);\r\n    }\r\n\r\n    return (\r\n        <Page title=\"Bộ sưu tập\">\r\n            <Container maxWidth={themeStretch ? false : 'xl'}>\r\n                <HeaderBreadcrumbs\r\n                    heading=\"Bộ sưu tập\"\r\n                    links={[\r\n                        { name: PATH_WIBU.label, href: PATH_WIBU.root },\r\n                        { name: PATH_WIBU.list.label, href: PATH_WIBU.list.root },\r\n                    ]}\r\n                />\r\n                <Stack spacing={2}>\r\n                    {isAuthenticated &&\r\n                        <ToggleButtonGroup\r\n                            color=\"primary\"\r\n                            value={isMyLists}\r\n                            exclusive\r\n                            onChange={handleChange}\r\n                            fullWidth\r\n                        >\r\n                            <ToggleButton value={false}>Tất cả</ToggleButton>\r\n                            <ToggleButton value={true}>Bộ sưu tập của tôi</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    }\r\n                    {\r\n                        lists.map(\r\n                            list =>\r\n                                <Paper key={list._id} sx={{ p: 2 }}>\r\n                                    <Link component={RouterLink} variant='h6' to={`${PATH_WIBU.list.one}/${list._id}`} >\r\n                                        {`${list.name} - ${list.titles.length} bộ`}\r\n                                    </Link>\r\n                                    <Typography variant='body2'>\r\n                                        {`Bởi ${list.user.displayName}`}\r\n                                    </Typography>\r\n                                </Paper>\r\n                        )\r\n                    }\r\n                </Stack>\r\n                <Box sx={{ display: 'flex', justifyContent: 'right' }}>\r\n                    <Pagination sx={{ my: 2 }} count={total} page={page} onChange={handlePageChange} />\r\n                </Box>\r\n            </Container>\r\n        </Page>\r\n    );\r\n}"],"sourceRoot":""}